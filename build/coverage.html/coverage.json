{"/home/travis/build/npmtest/node-npmtest-sharp/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-sharp/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_sharp */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-sharp/lib.npmtest_sharp.js":{"path":"/home/travis/build/npmtest/node-npmtest-sharp/lib.npmtest_sharp.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":50}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":56}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_sharp */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_sharp = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_sharp = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-sharp/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-sharp/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":49}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":63},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-sharp && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_sharp */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_sharp","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_sharp.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_sharp.rollup.js'] =","            local.assetsDict['/assets.npmtest_sharp.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_sharp.__dirname + '/lib.npmtest_sharp.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/index.js","s":{"1":1,"2":1,"3":8,"4":1},"b":{},"f":{"1":8},"fnMap":{"1":{"name":"(anonymous_1)","line":13,"loc":{"start":{"line":13,"column":10},"end":{"line":13,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":39}},"2":{"start":{"line":4,"column":0},"end":{"line":15,"column":3}},"3":{"start":{"line":14,"column":2},"end":{"line":14,"column":35}},"4":{"start":{"line":17,"column":0},"end":{"line":17,"column":23}}},"branchMap":{},"code":["'use strict';","","const Sharp = require('./constructor');","[","  'input',","  'resize',","  'composite',","  'operation',","  'colour',","  'channel',","  'output',","  'utility'","].forEach(function (decorator) {","  require('./' + decorator)(Sharp);","});","","module.exports = Sharp;",""],"l":{"3":1,"4":1,"14":8,"17":1}},"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/constructor.js":{"path":"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/constructor.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":1,"13":1,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1},"b":{"1":[0,1],"2":[0,0]},"f":{"1":1,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":1},"end":{"line":14,"column":13}}},"2":{"name":"(anonymous_2)","line":89,"loc":{"start":{"line":89,"column":14},"end":{"line":89,"column":40}}},"3":{"name":"(anonymous_3)","line":177,"loc":{"start":{"line":177,"column":19},"end":{"line":177,"column":42}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":29}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":29}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":33}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":33}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":33}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":53}},"7":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"8":{"start":{"line":14,"column":0},"end":{"line":25,"column":5}},"9":{"start":{"line":16,"column":2},"end":{"line":16,"column":70}},"10":{"start":{"line":18,"column":2},"end":{"line":20,"column":3}},"11":{"start":{"line":19,"column":4},"end":{"line":19,"column":101},"skip":true},"12":{"start":{"line":22,"column":2},"end":{"line":24,"column":18}},"13":{"start":{"line":23,"column":4},"end":{"line":23,"column":54}},"14":{"start":{"line":89,"column":0},"end":{"line":183,"column":2}},"15":{"start":{"line":90,"column":2},"end":{"line":92,"column":3}},"16":{"start":{"line":91,"column":4},"end":{"line":91,"column":37}},"17":{"start":{"line":93,"column":2},"end":{"line":93,"column":27}},"18":{"start":{"line":94,"column":2},"end":{"line":180,"column":4}},"19":{"start":{"line":178,"column":6},"end":{"line":178,"column":40}},"20":{"start":{"line":181,"column":2},"end":{"line":181,"column":90}},"21":{"start":{"line":182,"column":2},"end":{"line":182,"column":14}},"22":{"start":{"line":184,"column":0},"end":{"line":184,"column":36}},"23":{"start":{"line":191,"column":0},"end":{"line":195,"column":2}},"24":{"start":{"line":196,"column":0},"end":{"line":196,"column":24}},"25":{"start":{"line":208,"column":0},"end":{"line":208,"column":40}},"26":{"start":{"line":209,"column":0},"end":{"line":209,"column":20}},"27":{"start":{"line":217,"column":0},"end":{"line":217,"column":30}},"28":{"start":{"line":225,"column":0},"end":{"line":225,"column":26}},"29":{"start":{"line":231,"column":0},"end":{"line":231,"column":23}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":2},"end":{"line":18,"column":2},"skip":true},{"start":{"line":18,"column":2},"end":{"line":18,"column":2}}]},"2":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":2},"end":{"line":90,"column":2}},{"start":{"line":90,"column":2},"end":{"line":90,"column":2}}]}},"code":["'use strict';","","const path = require('path');","const util = require('util');","const stream = require('stream');","const events = require('events');","const semver = require('semver');","const sharp = require('../build/Release/sharp.node');","","// Versioning","let versions = {","  vips: sharp.libvipsVersion()","};","(function () {","  // Does libvips meet minimum requirement?","  const libvipsVersionMin = require('../package.json').config.libvips;","  /* istanbul ignore if */","  if (semver.lt(versions.vips, libvipsVersionMin)) {","    throw new Error('Found libvips ' + versions.vips + ' but require at least ' + libvipsVersionMin);","  }","  // Include versions of dependencies, if present","  try {","    versions = require('../vendor/lib/versions.json');","  } catch (err) {}","})();","","/**"," * @class Sharp"," *"," * Constructor factory to create an instance of `sharp`, to which further methods are chained."," *"," * JPEG, PNG or WebP format image data can be streamed out from this object."," * When using Stream based output, derived attributes are available from the `info` event."," *"," * Implements the [stream.Duplex](http://nodejs.org/api/stream.html#stream_class_stream_duplex) class."," *"," * @example"," * sharp('input.jpg')"," *   .resize(300, 200)"," *   .toFile('output.jpg', function(err) {"," *     // output.jpg is a 300 pixels wide and 200 pixels high image"," *     // containing a scaled and cropped version of input.jpg"," *   });"," *"," * @example"," * // Read image data from readableStream,"," * // resize to 300 pixels wide,"," * // emit an 'info' event with calculated dimensions"," * // and finally write image data to writableStream"," * var transformer = sharp()"," *   .resize(300)"," *   .on('info', function(info) {"," *     console.log('Image height is ' + info.height);"," *   });"," * readableStream.pipe(transformer).pipe(writableStream);"," *"," * @example"," * // Create a blank 300x200 PNG image of semi-transluent red pixels"," * sharp(null, {"," *   create: {"," *     width: 300,"," *     height: 200,"," *     channels: 4,"," *     background: { r: 255, g: 0, b: 0, alpha: 128 }"," *   }"," * })"," * .png()"," * .toBuffer()"," * .then( ... );"," *"," * @param {(Buffer|String)} [input] - if present, can be"," *  a Buffer containing JPEG, PNG, WebP, GIF, SVG, TIFF or raw pixel image data, or"," *  a String containing the path to an JPEG, PNG, WebP, GIF, SVG or TIFF image file."," *  JPEG, PNG, WebP, GIF, SVG, TIFF or raw pixel image data can be streamed into the object when null or undefined."," * @param {Object} [options] - if present, is an Object with optional attributes."," * @param {Number} [options.density=72] - integral number representing the DPI for vector images."," * @param {Object} [options.raw] - describes raw pixel input image data. See `raw()` for pixel ordering."," * @param {Number} [options.raw.width]"," * @param {Number} [options.raw.height]"," * @param {Number} [options.raw.channels] - 1-4"," * @param {Object} [options.create] - describes a new image to be created."," * @param {Number} [options.create.width]"," * @param {Number} [options.create.height]"," * @param {Number} [options.create.channels] - 3-4"," * @param {String|Object} [options.create.background] - parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha."," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","const Sharp = function (input, options) {","  if (!(this instanceof Sharp)) {","    return new Sharp(input, options);","  }","  stream.Duplex.call(this);","  this.options = {","    // input options","    sequentialRead: false,","    limitInputPixels: maximum.pixels,","    // ICC profiles","    iccProfilePath: path.join(__dirname, 'icc') + path.sep,","    // resize options","    topOffsetPre: -1,","    leftOffsetPre: -1,","    widthPre: -1,","    heightPre: -1,","    topOffsetPost: -1,","    leftOffsetPost: -1,","    widthPost: -1,","    heightPost: -1,","    width: -1,","    height: -1,","    canvas: 'crop',","    crop: 0,","    angle: 0,","    rotateBeforePreExtract: false,","    flip: false,","    flop: false,","    extendTop: 0,","    extendBottom: 0,","    extendLeft: 0,","    extendRight: 0,","    withoutEnlargement: false,","    kernel: 'lanczos3',","    interpolator: 'bicubic',","    centreSampling: false,","    // operations","    background: [0, 0, 0, 255],","    flatten: false,","    negate: false,","    blurSigma: 0,","    sharpenSigma: 0,","    sharpenFlat: 1,","    sharpenJagged: 2,","    threshold: 0,","    thresholdGrayscale: true,","    trimTolerance: 0,","    gamma: 0,","    greyscale: false,","    normalise: 0,","    booleanBufferIn: null,","    booleanFileIn: '',","    joinChannelIn: [],","    extractChannel: -1,","    colourspace: 'srgb',","    // overlay","    overlayGravity: 0,","    overlayXOffset: -1,","    overlayYOffset: -1,","    overlayTile: false,","    overlayCutout: false,","    // output","    fileOut: '',","    formatOut: 'input',","    streamOut: false,","    withMetadata: false,","    withMetadataOrientation: -1,","    resolveWithObject: false,","    // output format","    jpegQuality: 80,","    jpegProgressive: false,","    jpegChromaSubsampling: '4:2:0',","    jpegTrellisQuantisation: false,","    jpegOvershootDeringing: false,","    jpegOptimiseScans: false,","    pngProgressive: false,","    pngCompressionLevel: 6,","    pngAdaptiveFiltering: true,","    webpQuality: 80,","    webpAlphaQuality: 100,","    webpLossless: false,","    webpNearLossless: false,","    tiffQuality: 80,","    tiffCompression: 'jpeg',","    tiffPredictor: 'none',","    tileSize: 256,","    tileOverlap: 0,","    // Function to notify of queue length changes","    queueListener: function (queueLength) {","      queue.emit('change', queueLength);","    }","  };","  this.options.input = this._createInputDescriptor(input, options, { allowStream: true });","  return this;","};","util.inherits(Sharp, stream.Duplex);","","/**"," * Pixel limits."," * @member"," * @private"," */","const maximum = {","  width: 0x3FFF,","  height: 0x3FFF,","  pixels: Math.pow(0x3FFF, 2)","};","Sharp.maximum = maximum;","","/**"," * An EventEmitter that emits a `change` event when a task is either:"," * - queued, waiting for _libuv_ to provide a worker thread"," * - complete"," * @member"," * @example"," * sharp.queue.on('change', function(queueLength) {"," *   console.log('Queue contains ' + queueLength + ' task(s)');"," * });"," */","const queue = new events.EventEmitter();","Sharp.queue = queue;","","/**"," * An Object containing nested boolean values representing the available input and output formats/methods."," * @example"," * console.log(sharp.format());"," * @returns {Object}"," */","Sharp.format = sharp.format();","","/**"," * An Object containing the version numbers of libvips and its dependencies."," * @member"," * @example"," * console.log(sharp.versions);"," */","Sharp.versions = versions;","","/**"," * Export constructor."," * @private"," */","module.exports = Sharp;",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"11":1,"14":1,"16":1,"18":1,"19":1,"22":1,"23":1,"89":1,"90":0,"91":0,"93":0,"94":0,"178":0,"181":0,"182":0,"184":1,"191":1,"196":1,"208":1,"209":1,"217":1,"225":1,"231":1}},"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/input.js":{"path":"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/input.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":1,"52":0,"53":1,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":1,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":1,"94":0,"95":0,"96":1,"97":1,"98":8},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0,0,0,0],"12":[0,0],"13":[0,0],"14":[0,0,0,0,0,0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":8},"fnMap":{"1":{"name":"_createInputDescriptor","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":72}}},"2":{"name":"_write","line":87,"loc":{"start":{"line":87,"column":0},"end":{"line":87,"column":44}}},"3":{"name":"(anonymous_3)","line":94,"loc":{"start":{"line":94,"column":26},"end":{"line":94,"column":38}}},"4":{"name":"_flattenBufferIn","line":112,"loc":{"start":{"line":112,"column":0},"end":{"line":112,"column":29}}},"5":{"name":"_isStreamInput","line":123,"loc":{"start":{"line":123,"column":0},"end":{"line":123,"column":27}}},"6":{"name":"clone","line":142,"loc":{"start":{"line":142,"column":0},"end":{"line":142,"column":18}}},"7":{"name":"(anonymous_7)","line":148,"loc":{"start":{"line":148,"column":20},"end":{"line":148,"column":32}}},"8":{"name":"metadata","line":190,"loc":{"start":{"line":190,"column":0},"end":{"line":190,"column":29}}},"9":{"name":"(anonymous_9)","line":194,"loc":{"start":{"line":194,"column":24},"end":{"line":194,"column":36}}},"10":{"name":"(anonymous_10)","line":204,"loc":{"start":{"line":204,"column":25},"end":{"line":204,"column":52}}},"11":{"name":"(anonymous_11)","line":205,"loc":{"start":{"line":205,"column":26},"end":{"line":205,"column":38}}},"12":{"name":"(anonymous_12)","line":207,"loc":{"start":{"line":207,"column":39},"end":{"line":207,"column":64}}},"13":{"name":"(anonymous_13)","line":217,"loc":{"start":{"line":217,"column":25},"end":{"line":217,"column":52}}},"14":{"name":"(anonymous_14)","line":218,"loc":{"start":{"line":218,"column":37},"end":{"line":218,"column":62}}},"15":{"name":"limitInputPixels","line":238,"loc":{"start":{"line":238,"column":0},"end":{"line":238,"column":34}}},"16":{"name":"sequentialRead","line":259,"loc":{"start":{"line":259,"column":0},"end":{"line":259,"column":41}}},"17":{"name":"(anonymous_17)","line":268,"loc":{"start":{"line":268,"column":17},"end":{"line":268,"column":34}}},"18":{"name":"(anonymous_18)","line":280,"loc":{"start":{"line":280,"column":12},"end":{"line":280,"column":25}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":29}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":31}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":27}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":53}},"5":{"start":{"line":12,"column":0},"end":{"line":78,"column":1}},"6":{"start":{"line":13,"column":2},"end":{"line":13,"column":29}},"7":{"start":{"line":14,"column":2},"end":{"line":25,"column":3}},"8":{"start":{"line":16,"column":4},"end":{"line":16,"column":33}},"9":{"start":{"line":17,"column":9},"end":{"line":25,"column":3}},"10":{"start":{"line":19,"column":4},"end":{"line":19,"column":35}},"11":{"start":{"line":20,"column":9},"end":{"line":25,"column":3}},"12":{"start":{"line":22,"column":4},"end":{"line":22,"column":32}},"13":{"start":{"line":24,"column":4},"end":{"line":24,"column":57}},"14":{"start":{"line":26,"column":2},"end":{"line":76,"column":3}},"15":{"start":{"line":28,"column":4},"end":{"line":34,"column":5}},"16":{"start":{"line":29,"column":6},"end":{"line":33,"column":7}},"17":{"start":{"line":30,"column":8},"end":{"line":30,"column":55}},"18":{"start":{"line":32,"column":8},"end":{"line":32,"column":79}},"19":{"start":{"line":36,"column":4},"end":{"line":49,"column":5}},"20":{"start":{"line":37,"column":6},"end":{"line":48,"column":7}},"21":{"start":{"line":43,"column":8},"end":{"line":43,"column":58}},"22":{"start":{"line":44,"column":8},"end":{"line":44,"column":60}},"23":{"start":{"line":45,"column":8},"end":{"line":45,"column":64}},"24":{"start":{"line":47,"column":8},"end":{"line":47,"column":83}},"25":{"start":{"line":51,"column":4},"end":{"line":73,"column":5}},"26":{"start":{"line":52,"column":6},"end":{"line":72,"column":7}},"27":{"start":{"line":59,"column":8},"end":{"line":59,"column":64}},"28":{"start":{"line":60,"column":8},"end":{"line":60,"column":66}},"29":{"start":{"line":61,"column":8},"end":{"line":61,"column":70}},"30":{"start":{"line":62,"column":8},"end":{"line":62,"column":65}},"31":{"start":{"line":63,"column":8},"end":{"line":68,"column":10}},"32":{"start":{"line":69,"column":8},"end":{"line":69,"column":38}},"33":{"start":{"line":71,"column":8},"end":{"line":71,"column":103}},"34":{"start":{"line":74,"column":9},"end":{"line":76,"column":3}},"35":{"start":{"line":75,"column":4},"end":{"line":75,"column":61}},"36":{"start":{"line":77,"column":2},"end":{"line":77,"column":25}},"37":{"start":{"line":87,"column":0},"end":{"line":106,"column":1}},"38":{"start":{"line":89,"column":2},"end":{"line":105,"column":3}},"39":{"start":{"line":91,"column":4},"end":{"line":102,"column":5}},"40":{"start":{"line":92,"column":6},"end":{"line":97,"column":7}},"41":{"start":{"line":93,"column":8},"end":{"line":93,"column":26}},"42":{"start":{"line":94,"column":8},"end":{"line":96,"column":11}},"43":{"start":{"line":95,"column":10},"end":{"line":95,"column":39}},"44":{"start":{"line":98,"column":6},"end":{"line":98,"column":44}},"45":{"start":{"line":99,"column":6},"end":{"line":99,"column":17}},"46":{"start":{"line":101,"column":6},"end":{"line":101,"column":64},"skip":true},"47":{"start":{"line":104,"column":4},"end":{"line":104,"column":62},"skip":true},"48":{"start":{"line":112,"column":0},"end":{"line":116,"column":1}},"49":{"start":{"line":113,"column":2},"end":{"line":115,"column":3}},"50":{"start":{"line":114,"column":4},"end":{"line":114,"column":73}},"51":{"start":{"line":123,"column":0},"end":{"line":125,"column":1}},"52":{"start":{"line":124,"column":2},"end":{"line":124,"column":50}},"53":{"start":{"line":142,"column":0},"end":{"line":155,"column":1}},"54":{"start":{"line":143,"column":2},"end":{"line":143,"column":20}},"55":{"start":{"line":145,"column":2},"end":{"line":145,"column":40}},"56":{"start":{"line":146,"column":2},"end":{"line":146,"column":44}},"57":{"start":{"line":148,"column":2},"end":{"line":153,"column":5}},"58":{"start":{"line":150,"column":4},"end":{"line":150,"column":28}},"59":{"start":{"line":151,"column":4},"end":{"line":151,"column":51}},"60":{"start":{"line":152,"column":4},"end":{"line":152,"column":25}},"61":{"start":{"line":154,"column":2},"end":{"line":154,"column":15}},"62":{"start":{"line":190,"column":0},"end":{"line":228,"column":1}},"63":{"start":{"line":191,"column":2},"end":{"line":191,"column":20}},"64":{"start":{"line":192,"column":2},"end":{"line":227,"column":3}},"65":{"start":{"line":193,"column":4},"end":{"line":200,"column":5}},"66":{"start":{"line":194,"column":6},"end":{"line":197,"column":9}},"67":{"start":{"line":195,"column":8},"end":{"line":195,"column":32}},"68":{"start":{"line":196,"column":8},"end":{"line":196,"column":47}},"69":{"start":{"line":199,"column":6},"end":{"line":199,"column":45}},"70":{"start":{"line":201,"column":4},"end":{"line":201,"column":16}},"71":{"start":{"line":203,"column":4},"end":{"line":226,"column":5}},"72":{"start":{"line":204,"column":6},"end":{"line":215,"column":9}},"73":{"start":{"line":205,"column":8},"end":{"line":214,"column":11}},"74":{"start":{"line":206,"column":10},"end":{"line":206,"column":34}},"75":{"start":{"line":207,"column":10},"end":{"line":213,"column":13}},"76":{"start":{"line":208,"column":12},"end":{"line":212,"column":13}},"77":{"start":{"line":209,"column":14},"end":{"line":209,"column":26}},"78":{"start":{"line":211,"column":14},"end":{"line":211,"column":32}},"79":{"start":{"line":217,"column":6},"end":{"line":225,"column":9}},"80":{"start":{"line":218,"column":8},"end":{"line":224,"column":11}},"81":{"start":{"line":219,"column":10},"end":{"line":223,"column":11}},"82":{"start":{"line":220,"column":12},"end":{"line":220,"column":24}},"83":{"start":{"line":222,"column":12},"end":{"line":222,"column":30}},"84":{"start":{"line":238,"column":0},"end":{"line":251,"column":1}},"85":{"start":{"line":240,"column":2},"end":{"line":244,"column":3}},"86":{"start":{"line":241,"column":4},"end":{"line":241,"column":14}},"87":{"start":{"line":242,"column":9},"end":{"line":244,"column":3}},"88":{"start":{"line":243,"column":4},"end":{"line":243,"column":44}},"89":{"start":{"line":245,"column":2},"end":{"line":249,"column":3}},"90":{"start":{"line":246,"column":4},"end":{"line":246,"column":42}},"91":{"start":{"line":248,"column":4},"end":{"line":248,"column":99}},"92":{"start":{"line":250,"column":2},"end":{"line":250,"column":14}},"93":{"start":{"line":259,"column":0},"end":{"line":262,"column":1}},"94":{"start":{"line":260,"column":2},"end":{"line":260,"column":80}},"95":{"start":{"line":261,"column":2},"end":{"line":261,"column":14}},"96":{"start":{"line":268,"column":0},"end":{"line":283,"column":2}},"97":{"start":{"line":269,"column":2},"end":{"line":282,"column":5}},"98":{"start":{"line":281,"column":4},"end":{"line":281,"column":32}}},"branchMap":{"1":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":2},"end":{"line":14,"column":2}},{"start":{"line":14,"column":2},"end":{"line":14,"column":2}}]},"2":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":9},"end":{"line":17,"column":9}},{"start":{"line":17,"column":9},"end":{"line":17,"column":9}}]},"3":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":9},"end":{"line":20,"column":9}},{"start":{"line":20,"column":9},"end":{"line":20,"column":9}}]},"4":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":13},"end":{"line":20,"column":31}},{"start":{"line":20,"column":35},"end":{"line":20,"column":62}},{"start":{"line":20,"column":66},"end":{"line":20,"column":94}}]},"5":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":2},"end":{"line":26,"column":2}},{"start":{"line":26,"column":2},"end":{"line":26,"column":2}}]},"6":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":28,"column":4}},{"start":{"line":28,"column":4},"end":{"line":28,"column":4}}]},"7":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":6}},{"start":{"line":29,"column":6},"end":{"line":29,"column":6}}]},"8":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":10},"end":{"line":29,"column":42}},{"start":{"line":29,"column":46},"end":{"line":29,"column":87}}]},"9":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":4},"end":{"line":36,"column":4}},{"start":{"line":36,"column":4},"end":{"line":36,"column":4}}]},"10":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]},"11":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":8},"end":{"line":38,"column":35}},{"start":{"line":39,"column":8},"end":{"line":39,"column":42}},{"start":{"line":39,"column":46},"end":{"line":39,"column":115}},{"start":{"line":40,"column":8},"end":{"line":40,"column":43}},{"start":{"line":40,"column":47},"end":{"line":40,"column":118}},{"start":{"line":41,"column":8},"end":{"line":41,"column":45}},{"start":{"line":41,"column":49},"end":{"line":41,"column":92}}]},"12":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]},"13":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":6}},{"start":{"line":52,"column":6},"end":{"line":52,"column":6}}]},"14":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":38}},{"start":{"line":54,"column":8},"end":{"line":54,"column":45}},{"start":{"line":54,"column":49},"end":{"line":54,"column":121}},{"start":{"line":55,"column":8},"end":{"line":55,"column":46}},{"start":{"line":55,"column":50},"end":{"line":55,"column":124}},{"start":{"line":56,"column":8},"end":{"line":56,"column":48}},{"start":{"line":56,"column":52},"end":{"line":56,"column":98}},{"start":{"line":57,"column":8},"end":{"line":57,"column":50}}]},"15":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":9},"end":{"line":74,"column":9}},{"start":{"line":74,"column":9},"end":{"line":74,"column":9}}]},"16":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":2},"end":{"line":89,"column":2}},{"start":{"line":89,"column":2},"end":{"line":89,"column":2},"skip":true}]},"17":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":91,"column":4}},{"start":{"line":91,"column":4},"end":{"line":91,"column":4},"skip":true}]},"18":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":6},"end":{"line":92,"column":6}},{"start":{"line":92,"column":6},"end":{"line":92,"column":6}}]},"19":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":2},"end":{"line":113,"column":2}},{"start":{"line":113,"column":2},"end":{"line":113,"column":2}}]},"20":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":2},"end":{"line":192,"column":2}},{"start":{"line":192,"column":2},"end":{"line":192,"column":2}}]},"21":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":4},"end":{"line":193,"column":4}},{"start":{"line":193,"column":4},"end":{"line":193,"column":4}}]},"22":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":4},"end":{"line":203,"column":4}},{"start":{"line":203,"column":4},"end":{"line":203,"column":4}}]},"23":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":12},"end":{"line":208,"column":12}},{"start":{"line":208,"column":12},"end":{"line":208,"column":12}}]},"24":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":10},"end":{"line":219,"column":10}},{"start":{"line":219,"column":10},"end":{"line":219,"column":10}}]},"25":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":2},"end":{"line":240,"column":2}},{"start":{"line":240,"column":2},"end":{"line":240,"column":2}}]},"26":{"line":242,"type":"if","locations":[{"start":{"line":242,"column":9},"end":{"line":242,"column":9}},{"start":{"line":242,"column":9},"end":{"line":242,"column":9}}]},"27":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":2},"end":{"line":245,"column":2}},{"start":{"line":245,"column":2},"end":{"line":245,"column":2}}]},"28":{"line":245,"type":"binary-expr","locations":[{"start":{"line":245,"column":6},"end":{"line":245,"column":23}},{"start":{"line":245,"column":27},"end":{"line":245,"column":37}}]},"29":{"line":260,"type":"cond-expr","locations":[{"start":{"line":260,"column":58},"end":{"line":260,"column":72}},{"start":{"line":260,"column":75},"end":{"line":260,"column":79}}]}},"code":["'use strict';","","const util = require('util');","const color = require('color');","const is = require('./is');","const sharp = require('../build/Release/sharp.node');","","/**"," * Create Object containing input and input-related options."," * @private"," */","function _createInputDescriptor (input, inputOptions, containerOptions) {","  const inputDescriptor = {};","  if (is.string(input)) {","    // filesystem","    inputDescriptor.file = input;","  } else if (is.buffer(input)) {","    // Buffer","    inputDescriptor.buffer = input;","  } else if (!is.defined(input) && is.object(containerOptions) && containerOptions.allowStream) {","    // Stream","    inputDescriptor.buffer = [];","  } else {","    throw new Error('Unsupported input ' + typeof input);","  }","  if (is.object(inputOptions)) {","    // Density","    if (is.defined(inputOptions.density)) {","      if (is.integer(inputOptions.density) && is.inRange(inputOptions.density, 1, 2400)) {","        inputDescriptor.density = inputOptions.density;","      } else {","        throw new Error('Invalid density (1 to 2400) ' + inputOptions.density);","      }","    }","    // Raw pixel input","    if (is.defined(inputOptions.raw)) {","      if (","        is.object(inputOptions.raw) &&","        is.integer(inputOptions.raw.width) && is.inRange(inputOptions.raw.width, 1, this.constructor.maximum.width) &&","        is.integer(inputOptions.raw.height) && is.inRange(inputOptions.raw.height, 1, this.constructor.maximum.height) &&","        is.integer(inputOptions.raw.channels) && is.inRange(inputOptions.raw.channels, 1, 4)","      ) {","        inputDescriptor.rawWidth = inputOptions.raw.width;","        inputDescriptor.rawHeight = inputOptions.raw.height;","        inputDescriptor.rawChannels = inputOptions.raw.channels;","      } else {","        throw new Error('Expected width, height and channels for raw pixel input');","      }","    }","    // Create new image","    if (is.defined(inputOptions.create)) {","      if (","        is.object(inputOptions.create) &&","        is.integer(inputOptions.create.width) && is.inRange(inputOptions.create.width, 1, this.constructor.maximum.width) &&","        is.integer(inputOptions.create.height) && is.inRange(inputOptions.create.height, 1, this.constructor.maximum.height) &&","        is.integer(inputOptions.create.channels) && is.inRange(inputOptions.create.channels, 3, 4) &&","        is.defined(inputOptions.create.background)","      ) {","        inputDescriptor.createWidth = inputOptions.create.width;","        inputDescriptor.createHeight = inputOptions.create.height;","        inputDescriptor.createChannels = inputOptions.create.channels;","        const background = color(inputOptions.create.background);","        inputDescriptor.createBackground = [","          background.red(),","          background.green(),","          background.blue(),","          Math.round(background.alpha() * 255)","        ];","        delete inputDescriptor.buffer;","      } else {","        throw new Error('Expected width, height, channels and background to create a new input image');","      }","    }","  } else if (is.defined(inputOptions)) {","    throw new Error('Invalid input options ' + inputOptions);","  }","  return inputDescriptor;","}","","/**"," * Handle incoming Buffer chunk on Writable Stream."," * @private"," * @param {Buffer} chunk"," * @param {String} encoding - unused"," * @param {Function} callback"," */","function _write (chunk, encoding, callback) {","  /* istanbul ignore else */","  if (Array.isArray(this.options.input.buffer)) {","    /* istanbul ignore else */","    if (is.buffer(chunk)) {","      if (this.options.input.buffer.length === 0) {","        const that = this;","        this.on('finish', function () {","          that.streamInFinished = true;","        });","      }","      this.options.input.buffer.push(chunk);","      callback();","    } else {","      callback(new Error('Non-Buffer data on Writable Stream'));","    }","  } else {","    callback(new Error('Unexpected data on Writable Stream'));","  }","}","","/**"," * Flattens the array of chunks accumulated in input.buffer."," * @private"," */","function _flattenBufferIn () {","  if (this._isStreamInput()) {","    this.options.input.buffer = Buffer.concat(this.options.input.buffer);","  }","}","","/**"," * Are we expecting Stream-based input?"," * @private"," * @returns {Boolean}"," */","function _isStreamInput () {","  return Array.isArray(this.options.input.buffer);","}","","/**"," * Take a \"snapshot\" of the Sharp instance, returning a new instance."," * Cloned instances inherit the input of their parent instance."," * This allows multiple output Streams and therefore multiple processing pipelines to share a single input Stream."," *"," * @example"," * const pipeline = sharp().rotate();"," * pipeline.clone().resize(800, 600).pipe(firstWritableStream);"," * pipeline.clone().extract({ left: 20, top: 20, width: 100, height: 100 }).pipe(secondWritableStream);"," * readableStream.pipe(pipeline);"," * // firstWritableStream receives auto-rotated, resized readableStream"," * // secondWritableStream receives auto-rotated, extracted region of readableStream"," *"," * @returns {Sharp}"," */","function clone () {","  const that = this;","  // Clone existing options","  const clone = this.constructor.call();","  util._extend(clone.options, this.options);","  // Pass 'finish' event to clone for Stream-based input","  this.on('finish', function () {","    // Clone inherits input data","    that._flattenBufferIn();","    clone.options.bufferIn = that.options.bufferIn;","    clone.emit('finish');","  });","  return clone;","}","","/**"," * Fast access to image metadata without decoding any compressed image data."," * A Promises/A+ promise is returned when `callback` is not provided."," *"," * - `format`: Name of decoder used to decompress image data e.g. `jpeg`, `png`, `webp`, `gif`, `svg`"," * - `width`: Number of pixels wide"," * - `height`: Number of pixels high"," * - `space`: Name of colour space interpretation e.g. `srgb`, `rgb`, `cmyk`, `lab`, `b-w` [...](https://github.com/jcupitt/libvips/blob/master/libvips/iofuncs/enumtypes.c#L568)"," * - `channels`: Number of bands e.g. `3` for sRGB, `4` for CMYK"," * - `density`: Number of pixels per inch (DPI), if present"," * - `hasProfile`: Boolean indicating the presence of an embedded ICC profile"," * - `hasAlpha`: Boolean indicating the presence of an alpha transparency channel"," * - `orientation`: Number value of the EXIF Orientation header, if present"," * - `exif`: Buffer containing raw EXIF data, if present"," * - `icc`: Buffer containing raw [ICC](https://www.npmjs.com/package/icc) profile data, if present"," *"," * @example"," * const image = sharp(inputJpg);"," * image"," *   .metadata()"," *   .then(function(metadata) {"," *     return image"," *       .resize(Math.round(metadata.width / 2))"," *       .webp()"," *       .toBuffer();"," *   })"," *   .then(function(data) {"," *     // data contains a WebP image half the width and height of the original JPEG"," *   });"," *"," * @param {Function} [callback] - called with the arguments `(err, metadata)`"," * @returns {Promise<Object>|Sharp}"," */","function metadata (callback) {","  const that = this;","  if (is.fn(callback)) {","    if (this._isStreamInput()) {","      this.on('finish', function () {","        that._flattenBufferIn();","        sharp.metadata(that.options, callback);","      });","    } else {","      sharp.metadata(this.options, callback);","    }","    return this;","  } else {","    if (this._isStreamInput()) {","      return new Promise(function (resolve, reject) {","        that.on('finish', function () {","          that._flattenBufferIn();","          sharp.metadata(that.options, function (err, metadata) {","            if (err) {","              reject(err);","            } else {","              resolve(metadata);","            }","          });","        });","      });","    } else {","      return new Promise(function (resolve, reject) {","        sharp.metadata(that.options, function (err, metadata) {","          if (err) {","            reject(err);","          } else {","            resolve(metadata);","          }","        });","      });","    }","  }","}","","/**"," * Do not process input images where the number of pixels (width * height) exceeds this limit."," * Assumes image dimensions contained in the input metadata can be trusted."," * The default limit is 268402689 (0x3FFF * 0x3FFF) pixels."," * @param {(Number|Boolean)} limit - an integral Number of pixels, zero or false to remove limit, true to use default limit."," * @returns {Sharp}"," * @throws {Error} Invalid limit","*/","function limitInputPixels (limit) {","  // if we pass in false we represent the integer as 0 to disable","  if (limit === false) {","    limit = 0;","  } else if (limit === true) {","    limit = this.constructor.maximum.pixels;","  }","  if (is.integer(limit) && limit >= 0) {","    this.options.limitInputPixels = limit;","  } else {","    throw new Error('Invalid pixel limit (0 to ' + this.constructor.maximum.pixels + ') ' + limit);","  }","  return this;","}","","/**"," * An advanced setting that switches the libvips access method to `VIPS_ACCESS_SEQUENTIAL`."," * This will reduce memory usage and can improve performance on some systems."," * @param {Boolean} [sequentialRead=true]"," * @returns {Sharp}"," */","function sequentialRead (sequentialRead) {","  this.options.sequentialRead = is.bool(sequentialRead) ? sequentialRead : true;","  return this;","}","","/**"," * Decorate the Sharp prototype with input-related functions."," * @private"," */","module.exports = function (Sharp) {","  [","    // Private","    _createInputDescriptor,","    _write,","    _flattenBufferIn,","    _isStreamInput,","    // Public","    clone,","    metadata,","    limitInputPixels,","    sequentialRead","  ].forEach(function (f) {","    Sharp.prototype[f.name] = f;","  });","};",""],"l":{"3":1,"4":1,"5":1,"6":1,"12":1,"13":0,"14":0,"16":0,"17":0,"19":0,"20":0,"22":0,"24":0,"26":0,"28":0,"29":0,"30":0,"32":0,"36":0,"37":0,"43":0,"44":0,"45":0,"47":0,"51":0,"52":0,"59":0,"60":0,"61":0,"62":0,"63":0,"69":0,"71":0,"74":0,"75":0,"77":0,"87":1,"89":0,"91":0,"92":0,"93":0,"94":0,"95":0,"98":0,"99":0,"101":1,"104":1,"112":1,"113":0,"114":0,"123":1,"124":0,"142":1,"143":0,"145":0,"146":0,"148":0,"150":0,"151":0,"152":0,"154":0,"190":1,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"199":0,"201":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"211":0,"217":0,"218":0,"219":0,"220":0,"222":0,"238":1,"240":0,"241":0,"242":0,"243":0,"245":0,"246":0,"248":0,"250":0,"259":1,"260":0,"261":0,"268":1,"269":1,"281":8}},"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/is.js":{"path":"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/is.js","s":{"1":1,"2":0,"3":1,"4":0,"5":1,"6":0,"7":1,"8":2,"9":1,"10":0,"11":1,"12":0,"13":1,"14":0,"15":1,"16":0,"17":1,"18":0,"19":1,"20":0,"21":1,"22":0,"23":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":2,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"(anonymous_1)","line":7,"loc":{"start":{"line":7,"column":16},"end":{"line":7,"column":31}}},"2":{"name":"(anonymous_2)","line":15,"loc":{"start":{"line":15,"column":15},"end":{"line":15,"column":30}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":11},"end":{"line":23,"column":26}}},"4":{"name":"(anonymous_4)","line":31,"loc":{"start":{"line":31,"column":13},"end":{"line":31,"column":28}}},"5":{"name":"(anonymous_5)","line":39,"loc":{"start":{"line":39,"column":15},"end":{"line":39,"column":30}}},"6":{"name":"(anonymous_6)","line":47,"loc":{"start":{"line":47,"column":15},"end":{"line":47,"column":30}}},"7":{"name":"(anonymous_7)","line":55,"loc":{"start":{"line":55,"column":15},"end":{"line":55,"column":30}}},"8":{"name":"(anonymous_8)","line":63,"loc":{"start":{"line":63,"column":16},"end":{"line":63,"column":31}}},"9":{"name":"(anonymous_9)","line":71,"loc":{"start":{"line":71,"column":16},"end":{"line":71,"column":41}}},"10":{"name":"(anonymous_10)","line":79,"loc":{"start":{"line":79,"column":16},"end":{"line":79,"column":37}}},"11":{"name":"(anonymous_11)","line":92,"loc":{"start":{"line":92,"column":30},"end":{"line":92,"column":64}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":9,"column":2}},"2":{"start":{"line":8,"column":2},"end":{"line":8,"column":52}},"3":{"start":{"line":15,"column":0},"end":{"line":17,"column":2}},"4":{"start":{"line":16,"column":2},"end":{"line":16,"column":33}},"5":{"start":{"line":23,"column":0},"end":{"line":25,"column":2}},"6":{"start":{"line":24,"column":2},"end":{"line":24,"column":35}},"7":{"start":{"line":31,"column":0},"end":{"line":33,"column":2}},"8":{"start":{"line":32,"column":2},"end":{"line":32,"column":34}},"9":{"start":{"line":39,"column":0},"end":{"line":41,"column":2}},"10":{"start":{"line":40,"column":2},"end":{"line":40,"column":46}},"11":{"start":{"line":47,"column":0},"end":{"line":49,"column":2}},"12":{"start":{"line":48,"column":2},"end":{"line":48,"column":51}},"13":{"start":{"line":55,"column":0},"end":{"line":57,"column":2}},"14":{"start":{"line":56,"column":2},"end":{"line":56,"column":55}},"15":{"start":{"line":63,"column":0},"end":{"line":65,"column":2}},"16":{"start":{"line":64,"column":2},"end":{"line":64,"column":38}},"17":{"start":{"line":71,"column":0},"end":{"line":73,"column":2}},"18":{"start":{"line":72,"column":2},"end":{"line":72,"column":34}},"19":{"start":{"line":79,"column":0},"end":{"line":81,"column":2}},"20":{"start":{"line":80,"column":2},"end":{"line":80,"column":34}},"21":{"start":{"line":92,"column":0},"end":{"line":96,"column":2}},"22":{"start":{"line":93,"column":2},"end":{"line":95,"column":4}},"23":{"start":{"line":98,"column":0},"end":{"line":110,"column":2}}},"branchMap":{"1":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":9},"end":{"line":8,"column":35}},{"start":{"line":8,"column":39},"end":{"line":8,"column":51}}]},"2":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":9},"end":{"line":40,"column":20}},{"start":{"line":40,"column":24},"end":{"line":40,"column":45}}]},"3":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":9},"end":{"line":48,"column":32}},{"start":{"line":48,"column":36},"end":{"line":48,"column":50}}]},"4":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":9},"end":{"line":56,"column":32}},{"start":{"line":56,"column":36},"end":{"line":56,"column":54}}]},"5":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":9},"end":{"line":64,"column":20}},{"start":{"line":64,"column":24},"end":{"line":64,"column":37}}]},"6":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":9},"end":{"line":72,"column":19}},{"start":{"line":72,"column":23},"end":{"line":72,"column":33}}]}},"code":["'use strict';","","/**"," * Is this value defined and not null?"," * @private"," */","const defined = function (val) {","  return typeof val !== 'undefined' && val !== null;","};","","/**"," * Is this value an object?"," * @private"," */","const object = function (val) {","  return typeof val === 'object';","};","","/**"," * Is this value a function?"," * @private"," */","const fn = function (val) {","  return typeof val === 'function';","};","","/**"," * Is this value a boolean?"," * @private"," */","const bool = function (val) {","  return typeof val === 'boolean';","};","","/**"," * Is this value a Buffer object?"," * @private"," */","const buffer = function (val) {","  return object(val) && val instanceof Buffer;","};","","/**"," * Is this value a non-empty string?"," * @private"," */","const string = function (val) {","  return typeof val === 'string' && val.length > 0;","};","","/**"," * Is this value a real number?"," * @private"," */","const number = function (val) {","  return typeof val === 'number' && !Number.isNaN(val);","};","","/**"," * Is this value an integer?"," * @private"," */","const integer = function (val) {","  return number(val) && val % 1 === 0;","};","","/**"," * Is this value within an inclusive given range?"," * @private"," */","const inRange = function (val, min, max) {","  return val >= min && val <= max;","};","","/**"," * Is this value within the elements of an array?"," * @private"," */","const inArray = function (val, list) {","  return list.indexOf(val) !== -1;","};","","/**"," * Create an Error with a message relating to an invalid parameter."," *"," * @param {String} name - parameter name."," * @param {String} expected - description of the type/value/range expected."," * @param {*} actual - the value received."," * @returns {Error} Containing the formatted message."," * @private"," */","const invalidParameterError = function (name, expected, actual) {","  return new Error(","    `Expected ${expected} for ${name} but received ${actual} of type ${typeof actual}`","  );","};","","module.exports = {","  defined: defined,","  object: object,","  fn: fn,","  bool: bool,","  buffer: buffer,","  string: string,","  number: number,","  integer: integer,","  inRange: inRange,","  inArray: inArray,","  invalidParameterError: invalidParameterError","};",""],"l":{"7":1,"8":0,"15":1,"16":0,"23":1,"24":0,"31":1,"32":2,"39":1,"40":0,"47":1,"48":0,"55":1,"56":0,"63":1,"64":0,"71":1,"72":0,"79":1,"80":0,"92":1,"93":0,"98":1}},"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/resize.js":{"path":"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/resize.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1,"45":0,"46":0,"47":1,"48":0,"49":0,"50":1,"51":0,"52":0,"53":1,"54":0,"55":0,"56":1,"57":0,"58":0,"59":1,"60":1,"61":7,"62":1,"63":1,"64":1,"65":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":7},"fnMap":{"1":{"name":"resize","line":104,"loc":{"start":{"line":104,"column":0},"end":{"line":104,"column":41}}},"2":{"name":"crop","line":175,"loc":{"start":{"line":175,"column":0},"end":{"line":175,"column":21}}},"3":{"name":"embed","line":221,"loc":{"start":{"line":221,"column":0},"end":{"line":221,"column":18}}},"4":{"name":"max","line":245,"loc":{"start":{"line":245,"column":0},"end":{"line":245,"column":16}}},"5":{"name":"min","line":258,"loc":{"start":{"line":258,"column":0},"end":{"line":258,"column":16}}},"6":{"name":"ignoreAspectRatio","line":268,"loc":{"start":{"line":268,"column":0},"end":{"line":268,"column":30}}},"7":{"name":"withoutEnlargement","line":280,"loc":{"start":{"line":280,"column":0},"end":{"line":280,"column":49}}},"8":{"name":"(anonymous_8)","line":289,"loc":{"start":{"line":289,"column":17},"end":{"line":289,"column":34}}},"9":{"name":"(anonymous_9)","line":298,"loc":{"start":{"line":298,"column":12},"end":{"line":298,"column":25}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":10,"column":0},"end":{"line":21,"column":2}},"3":{"start":{"line":28,"column":0},"end":{"line":31,"column":2}},"4":{"start":{"line":38,"column":0},"end":{"line":43,"column":2}},"5":{"start":{"line":50,"column":0},"end":{"line":59,"column":2}},"6":{"start":{"line":104,"column":0},"end":{"line":147,"column":1}},"7":{"start":{"line":105,"column":2},"end":{"line":113,"column":3}},"8":{"start":{"line":106,"column":4},"end":{"line":110,"column":5}},"9":{"start":{"line":107,"column":6},"end":{"line":107,"column":33}},"10":{"start":{"line":109,"column":6},"end":{"line":109,"column":112}},"11":{"start":{"line":112,"column":4},"end":{"line":112,"column":28}},"12":{"start":{"line":114,"column":2},"end":{"line":122,"column":3}},"13":{"start":{"line":115,"column":4},"end":{"line":119,"column":5}},"14":{"start":{"line":116,"column":6},"end":{"line":116,"column":35}},"15":{"start":{"line":118,"column":6},"end":{"line":118,"column":115}},"16":{"start":{"line":121,"column":4},"end":{"line":121,"column":29}},"17":{"start":{"line":123,"column":2},"end":{"line":145,"column":3}},"18":{"start":{"line":125,"column":4},"end":{"line":131,"column":5}},"19":{"start":{"line":126,"column":6},"end":{"line":130,"column":7}},"20":{"start":{"line":127,"column":8},"end":{"line":127,"column":53}},"21":{"start":{"line":129,"column":8},"end":{"line":129,"column":86}},"22":{"start":{"line":133,"column":4},"end":{"line":139,"column":5}},"23":{"start":{"line":134,"column":6},"end":{"line":138,"column":7}},"24":{"start":{"line":135,"column":8},"end":{"line":135,"column":71}},"25":{"start":{"line":137,"column":8},"end":{"line":137,"column":104}},"26":{"start":{"line":141,"column":4},"end":{"line":141,"column":111}},"27":{"start":{"line":142,"column":4},"end":{"line":144,"column":5}},"28":{"start":{"line":143,"column":6},"end":{"line":143,"column":71}},"29":{"start":{"line":146,"column":2},"end":{"line":146,"column":14}},"30":{"start":{"line":175,"column":0},"end":{"line":196,"column":1}},"31":{"start":{"line":176,"column":2},"end":{"line":176,"column":31}},"32":{"start":{"line":177,"column":2},"end":{"line":194,"column":3}},"33":{"start":{"line":179,"column":4},"end":{"line":179,"column":39}},"34":{"start":{"line":180,"column":9},"end":{"line":194,"column":3}},"35":{"start":{"line":182,"column":4},"end":{"line":182,"column":29}},"36":{"start":{"line":183,"column":9},"end":{"line":194,"column":3}},"37":{"start":{"line":185,"column":4},"end":{"line":185,"column":38}},"38":{"start":{"line":186,"column":9},"end":{"line":194,"column":3}},"39":{"start":{"line":188,"column":4},"end":{"line":188,"column":29}},"40":{"start":{"line":189,"column":9},"end":{"line":194,"column":3}},"41":{"start":{"line":191,"column":4},"end":{"line":191,"column":39}},"42":{"start":{"line":193,"column":4},"end":{"line":193,"column":80}},"43":{"start":{"line":195,"column":2},"end":{"line":195,"column":14}},"44":{"start":{"line":221,"column":0},"end":{"line":224,"column":1}},"45":{"start":{"line":222,"column":2},"end":{"line":222,"column":32}},"46":{"start":{"line":223,"column":2},"end":{"line":223,"column":14}},"47":{"start":{"line":245,"column":0},"end":{"line":248,"column":1}},"48":{"start":{"line":246,"column":2},"end":{"line":246,"column":30}},"49":{"start":{"line":247,"column":2},"end":{"line":247,"column":14}},"50":{"start":{"line":258,"column":0},"end":{"line":261,"column":1}},"51":{"start":{"line":259,"column":2},"end":{"line":259,"column":30}},"52":{"start":{"line":260,"column":2},"end":{"line":260,"column":14}},"53":{"start":{"line":268,"column":0},"end":{"line":271,"column":1}},"54":{"start":{"line":269,"column":2},"end":{"line":269,"column":40}},"55":{"start":{"line":270,"column":2},"end":{"line":270,"column":14}},"56":{"start":{"line":280,"column":0},"end":{"line":283,"column":1}},"57":{"start":{"line":281,"column":2},"end":{"line":281,"column":92}},"58":{"start":{"line":282,"column":2},"end":{"line":282,"column":14}},"59":{"start":{"line":289,"column":0},"end":{"line":306,"column":2}},"60":{"start":{"line":290,"column":2},"end":{"line":300,"column":5}},"61":{"start":{"line":299,"column":4},"end":{"line":299,"column":32}},"62":{"start":{"line":302,"column":2},"end":{"line":302,"column":26}},"63":{"start":{"line":303,"column":2},"end":{"line":303,"column":28}},"64":{"start":{"line":304,"column":2},"end":{"line":304,"column":24}},"65":{"start":{"line":305,"column":2},"end":{"line":305,"column":36}}},"branchMap":{"1":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":2},"end":{"line":105,"column":2}},{"start":{"line":105,"column":2},"end":{"line":105,"column":2}}]},"2":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":4},"end":{"line":106,"column":4}},{"start":{"line":106,"column":4},"end":{"line":106,"column":4}}]},"3":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":8},"end":{"line":106,"column":25}},{"start":{"line":106,"column":29},"end":{"line":106,"column":81}}]},"4":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":2},"end":{"line":114,"column":2}},{"start":{"line":114,"column":2},"end":{"line":114,"column":2}}]},"5":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":4},"end":{"line":115,"column":4}},{"start":{"line":115,"column":4},"end":{"line":115,"column":4}}]},"6":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":8},"end":{"line":115,"column":26}},{"start":{"line":115,"column":30},"end":{"line":115,"column":84}}]},"7":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":2},"end":{"line":123,"column":2}},{"start":{"line":123,"column":2},"end":{"line":123,"column":2}}]},"8":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":4},"end":{"line":125,"column":4}},{"start":{"line":125,"column":4},"end":{"line":125,"column":4}}]},"9":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":6},"end":{"line":126,"column":6}},{"start":{"line":126,"column":6},"end":{"line":126,"column":6}}]},"10":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":4},"end":{"line":133,"column":4}},{"start":{"line":133,"column":4},"end":{"line":133,"column":4}}]},"11":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":6},"end":{"line":134,"column":6}},{"start":{"line":134,"column":6},"end":{"line":134,"column":6}}]},"12":{"line":141,"type":"cond-expr","locations":[{"start":{"line":141,"column":63},"end":{"line":141,"column":85}},{"start":{"line":141,"column":88},"end":{"line":141,"column":110}}]},"13":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":4},"end":{"line":142,"column":4}},{"start":{"line":142,"column":4},"end":{"line":142,"column":4}}]},"14":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":2},"end":{"line":177,"column":2}},{"start":{"line":177,"column":2},"end":{"line":177,"column":2}}]},"15":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":9},"end":{"line":180,"column":9}},{"start":{"line":180,"column":9},"end":{"line":180,"column":9}}]},"16":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":13},"end":{"line":180,"column":29}},{"start":{"line":180,"column":33},"end":{"line":180,"column":55}}]},"17":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":9},"end":{"line":183,"column":9}},{"start":{"line":183,"column":9},"end":{"line":183,"column":9}}]},"18":{"line":183,"type":"binary-expr","locations":[{"start":{"line":183,"column":13},"end":{"line":183,"column":28}},{"start":{"line":183,"column":32},"end":{"line":183,"column":57}}]},"19":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":9},"end":{"line":186,"column":9}},{"start":{"line":186,"column":9},"end":{"line":186,"column":9}}]},"20":{"line":186,"type":"binary-expr","locations":[{"start":{"line":186,"column":13},"end":{"line":186,"column":29}},{"start":{"line":186,"column":33},"end":{"line":186,"column":57}}]},"21":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":9},"end":{"line":189,"column":9}},{"start":{"line":189,"column":9},"end":{"line":189,"column":9}}]},"22":{"line":189,"type":"binary-expr","locations":[{"start":{"line":189,"column":13},"end":{"line":189,"column":28}},{"start":{"line":189,"column":32},"end":{"line":189,"column":58}}]},"23":{"line":281,"type":"cond-expr","locations":[{"start":{"line":281,"column":66},"end":{"line":281,"column":84}},{"start":{"line":281,"column":87},"end":{"line":281,"column":91}}]}},"code":["'use strict';","","const is = require('./is');","","/**"," * Weighting to apply to image crop."," * @member"," * @private"," */","const gravity = {","  center: 0,","  centre: 0,","  north: 1,","  east: 2,","  south: 3,","  west: 4,","  northeast: 5,","  southeast: 6,","  southwest: 7,","  northwest: 8","};","","/**"," * Strategies for automagic crop behaviour."," * @member"," * @private"," */","const strategy = {","  entropy: 16,","  attention: 17","};","","/**"," * Reduction kernels."," * @member"," * @private"," */","const kernel = {","  nearest: 'nearest',","  cubic: 'cubic',","  lanczos2: 'lanczos2',","  lanczos3: 'lanczos3'","};","","/**"," * Enlargement interpolators."," * @member"," * @private"," */","const interpolator = {","  nearest: 'nearest',","  bilinear: 'bilinear',","  bicubic: 'bicubic',","  nohalo: 'nohalo',","  lbb: 'lbb',","  locallyBoundedBicubic: 'lbb',","  vsqbs: 'vsqbs',","  vertexSplitQuadraticBasisSpline: 'vsqbs'","};","","/**"," * Resize image to `width` x `height`."," * By default, the resized image is centre cropped to the exact size specified."," *"," * Possible reduction kernels are:"," * - `nearest`: Use [nearest neighbour interpolation](http://en.wikipedia.org/wiki/Nearest-neighbor_interpolation)."," * - `cubic`: Use a [Catmull-Rom spline](https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline)."," * - `lanczos2`: Use a [Lanczos kernel](https://en.wikipedia.org/wiki/Lanczos_resampling#Lanczos_kernel) with `a=2`."," * - `lanczos3`: Use a Lanczos kernel with `a=3` (the default)."," *"," * Possible enlargement interpolators are:"," * - `nearest`: Use [nearest neighbour interpolation](http://en.wikipedia.org/wiki/Nearest-neighbor_interpolation)."," * - `bilinear`: Use [bilinear interpolation](http://en.wikipedia.org/wiki/Bilinear_interpolation), faster than bicubic but with less smooth results."," * - `vertexSplitQuadraticBasisSpline`: Use the smoother [VSQBS interpolation](https://github.com/jcupitt/libvips/blob/master/libvips/resample/vsqbs.cpp#L48) to prevent \"staircasing\" when enlarging."," * - `bicubic`: Use [bicubic interpolation](http://en.wikipedia.org/wiki/Bicubic_interpolation) (the default)."," * - `locallyBoundedBicubic`: Use [LBB interpolation](https://github.com/jcupitt/libvips/blob/master/libvips/resample/lbb.cpp#L100), which prevents some \"[acutance](http://en.wikipedia.org/wiki/Acutance)\" but typically reduces performance by a factor of 2."," * - `nohalo`: Use [Nohalo interpolation](http://eprints.soton.ac.uk/268086/), which prevents acutance but typically reduces performance by a factor of 3."," *"," * @example"," * sharp(inputBuffer)"," *   .resize(200, 300, {"," *     kernel: sharp.kernel.lanczos2,"," *     interpolator: sharp.interpolator.nohalo"," *   })"," *   .background('white')"," *   .embed()"," *   .toFile('output.tiff')"," *   .then(function() {"," *     // output.tiff is a 200 pixels wide and 300 pixels high image"," *     // containing a lanczos2/nohalo scaled version, embedded on a white canvas,"," *     // of the image data in inputBuffer"," *   });"," *"," * @param {Number} [width] - pixels wide the resultant image should be, between 1 and 16383 (0x3FFF). Use `null` or `undefined` to auto-scale the width to match the height."," * @param {Number} [height] - pixels high the resultant image should be, between 1 and 16383. Use `null` or `undefined` to auto-scale the height to match the width."," * @param {Object} [options]"," * @param {String} [options.kernel='lanczos3'] - the kernel to use for image reduction."," * @param {String} [options.interpolator='bicubic'] - the interpolator to use for image enlargement."," * @param {Boolean} [options.centreSampling=false] - use *magick centre sampling convention instead of corner sampling."," * @param {Boolean} [options.centerSampling=false] - alternative spelling of centreSampling."," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function resize (width, height, options) {","  if (is.defined(width)) {","    if (is.integer(width) && is.inRange(width, 1, this.constructor.maximum.width)) {","      this.options.width = width;","    } else {","      throw is.invalidParameterError('width', `integer between 1 and ${this.constructor.maximum.width}`, width);","    }","  } else {","    this.options.width = -1;","  }","  if (is.defined(height)) {","    if (is.integer(height) && is.inRange(height, 1, this.constructor.maximum.height)) {","      this.options.height = height;","    } else {","      throw is.invalidParameterError('height', `integer between 1 and ${this.constructor.maximum.height}`, height);","    }","  } else {","    this.options.height = -1;","  }","  if (is.object(options)) {","    // Kernel","    if (is.defined(options.kernel)) {","      if (is.string(kernel[options.kernel])) {","        this.options.kernel = kernel[options.kernel];","      } else {","        throw is.invalidParameterError('kernel', 'valid kernel name', options.kernel);","      }","    }","    // Interpolator","    if (is.defined(options.interpolator)) {","      if (is.string(interpolator[options.interpolator])) {","        this.options.interpolator = interpolator[options.interpolator];","      } else {","        throw is.invalidParameterError('interpolator', 'valid interpolator name', options.interpolator);","      }","    }","    // Centre sampling","    options.centreSampling = is.bool(options.centerSampling) ? options.centerSampling : options.centreSampling;","    if (is.defined(options.centreSampling)) {","      this._setBooleanOption('centreSampling', options.centreSampling);","    }","  }","  return this;","}","","/**"," * Crop the resized image to the exact size specified, the default behaviour."," *"," * Possible attributes of the optional `sharp.gravity` are `north`, `northeast`, `east`, `southeast`, `south`,"," * `southwest`, `west`, `northwest`, `center` and `centre`."," *"," * The experimental strategy-based approach resizes so one dimension is at its target length"," * then repeatedly ranks edge regions, discarding the edge with the lowest score based on the selected strategy."," * - `entropy`: focus on the region with the highest [Shannon entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29)."," * - `attention`: focus on the region with the highest luminance frequency, colour saturation and presence of skin tones."," *"," * @example"," * const transformer = sharp()"," *   .resize(200, 200)"," *   .crop(sharp.strategy.entropy)"," *   .on('error', function(err) {"," *     console.log(err);"," *   });"," * // Read image data from readableStream"," * // Write 200px square auto-cropped image data to writableStream"," * readableStream.pipe(transformer).pipe(writableStream);"," *"," * @param {String} [crop='centre'] - A member of `sharp.gravity` to crop to an edge/corner or `sharp.strategy` to crop dynamically."," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function crop (crop) {","  this.options.canvas = 'crop';","  if (!is.defined(crop)) {","    // Default","    this.options.crop = gravity.center;","  } else if (is.integer(crop) && is.inRange(crop, 0, 8)) {","    // Gravity (numeric)","    this.options.crop = crop;","  } else if (is.string(crop) && is.integer(gravity[crop])) {","    // Gravity (string)","    this.options.crop = gravity[crop];","  } else if (is.integer(crop) && crop >= strategy.entropy) {","    // Strategy","    this.options.crop = crop;","  } else if (is.string(crop) && is.integer(strategy[crop])) {","    // Strategy (string)","    this.options.crop = strategy[crop];","  } else {","    throw is.invalidParameterError('crop', 'valid crop id/name/strategy', crop);","  }","  return this;","}","","/**"," * Preserving aspect ratio, resize the image to the maximum `width` or `height` specified"," * then embed on a background of the exact `width` and `height` specified."," *"," * If the background contains an alpha value then WebP and PNG format output images will"," * contain an alpha channel, even when the input image does not."," *"," * @example"," * sharp('input.gif')"," *   .resize(200, 300)"," *   .background({r: 0, g: 0, b: 0, alpha: 0})"," *   .embed()"," *   .toFormat(sharp.format.webp)"," *   .toBuffer(function(err, outputBuffer) {"," *     if (err) {"," *       throw err;"," *     }"," *     // outputBuffer contains WebP image data of a 200 pixels wide and 300 pixels high"," *     // containing a scaled version, embedded on a transparent canvas, of input.gif"," *   });"," *"," * @returns {Sharp}"," */","function embed () {","  this.options.canvas = 'embed';","  return this;","}","","/**"," * Preserving aspect ratio, resize the image to be as large as possible"," * while ensuring its dimensions are less than or equal to the `width` and `height` specified."," *"," * Both `width` and `height` must be provided via `resize` otherwise the behaviour will default to `crop`."," *"," * @example"," * sharp(inputBuffer)"," *   .resize(200, 200)"," *   .max()"," *   .toFormat('jpeg')"," *   .toBuffer()"," *   .then(function(outputBuffer) {"," *     // outputBuffer contains JPEG image data no wider than 200 pixels and no higher"," *     // than 200 pixels regardless of the inputBuffer image dimensions"," *   });"," *"," * @returns {Sharp}"," */","function max () {","  this.options.canvas = 'max';","  return this;","}","","/**"," * Preserving aspect ratio, resize the image to be as small as possible"," * while ensuring its dimensions are greater than or equal to the `width` and `height` specified."," *"," * Both `width` and `height` must be provided via `resize` otherwise the behaviour will default to `crop`."," *"," * @returns {Sharp}"," */","function min () {","  this.options.canvas = 'min';","  return this;","}","","/**"," * Ignoring the aspect ratio of the input, stretch the image to"," * the exact `width` and/or `height` provided via `resize`."," * @returns {Sharp}"," */","function ignoreAspectRatio () {","  this.options.canvas = 'ignore_aspect';","  return this;","}","","/**"," * Do not enlarge the output image if the input image width *or* height are already less than the required dimensions."," * This is equivalent to GraphicsMagick's `>` geometry option:"," * \"*change the dimensions of the image only if its width or height exceeds the geometry specification*\"."," * @param {Boolean} [withoutEnlargement=true]"," * @returns {Sharp}","*/","function withoutEnlargement (withoutEnlargement) {","  this.options.withoutEnlargement = is.bool(withoutEnlargement) ? withoutEnlargement : true;","  return this;","}","","/**"," * Decorate the Sharp prototype with resize-related functions."," * @private"," */","module.exports = function (Sharp) {","  [","    resize,","    crop,","    embed,","    max,","    min,","    ignoreAspectRatio,","    withoutEnlargement","  ].forEach(function (f) {","    Sharp.prototype[f.name] = f;","  });","  // Class attributes","  Sharp.gravity = gravity;","  Sharp.strategy = strategy;","  Sharp.kernel = kernel;","  Sharp.interpolator = interpolator;","};",""],"l":{"3":1,"10":1,"28":1,"38":1,"50":1,"104":1,"105":0,"106":0,"107":0,"109":0,"112":0,"114":0,"115":0,"116":0,"118":0,"121":0,"123":0,"125":0,"126":0,"127":0,"129":0,"133":0,"134":0,"135":0,"137":0,"141":0,"142":0,"143":0,"146":0,"175":1,"176":0,"177":0,"179":0,"180":0,"182":0,"183":0,"185":0,"186":0,"188":0,"189":0,"191":0,"193":0,"195":0,"221":1,"222":0,"223":0,"245":1,"246":0,"247":0,"258":1,"259":0,"260":0,"268":1,"269":0,"270":0,"280":1,"281":0,"282":0,"289":1,"290":1,"299":7,"302":1,"303":1,"304":1,"305":1}},"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/composite.js":{"path":"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/composite.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":1},"fnMap":{"1":{"name":"overlayWith","line":49,"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":40}}},"2":{"name":"(anonymous_2)","line":96,"loc":{"start":{"line":96,"column":17},"end":{"line":96,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":49,"column":0},"end":{"line":90,"column":1}},"3":{"start":{"line":50,"column":2},"end":{"line":52,"column":5}},"4":{"start":{"line":53,"column":2},"end":{"line":88,"column":3}},"5":{"start":{"line":54,"column":4},"end":{"line":60,"column":5}},"6":{"start":{"line":55,"column":6},"end":{"line":59,"column":7}},"7":{"start":{"line":56,"column":8},"end":{"line":56,"column":48}},"8":{"start":{"line":58,"column":8},"end":{"line":58,"column":64}},"9":{"start":{"line":61,"column":4},"end":{"line":67,"column":5}},"10":{"start":{"line":62,"column":6},"end":{"line":66,"column":7}},"11":{"start":{"line":63,"column":8},"end":{"line":63,"column":52}},"12":{"start":{"line":65,"column":8},"end":{"line":65,"column":68}},"13":{"start":{"line":68,"column":4},"end":{"line":78,"column":5}},"14":{"start":{"line":69,"column":6},"end":{"line":77,"column":7}},"15":{"start":{"line":73,"column":8},"end":{"line":73,"column":51}},"16":{"start":{"line":74,"column":8},"end":{"line":74,"column":50}},"17":{"start":{"line":76,"column":8},"end":{"line":76,"column":95}},"18":{"start":{"line":79,"column":4},"end":{"line":87,"column":5}},"19":{"start":{"line":80,"column":6},"end":{"line":86,"column":7}},"20":{"start":{"line":81,"column":8},"end":{"line":81,"column":54}},"21":{"start":{"line":82,"column":13},"end":{"line":86,"column":7}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":80}},"23":{"start":{"line":85,"column":8},"end":{"line":85,"column":74}},"24":{"start":{"line":89,"column":2},"end":{"line":89,"column":14}},"25":{"start":{"line":96,"column":0},"end":{"line":98,"column":2}},"26":{"start":{"line":97,"column":2},"end":{"line":97,"column":44}}},"branchMap":{"1":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":2},"end":{"line":53,"column":2}},{"start":{"line":53,"column":2},"end":{"line":53,"column":2}}]},"2":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":54,"column":4}},{"start":{"line":54,"column":4},"end":{"line":54,"column":4}}]},"3":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":6},"end":{"line":55,"column":6}},{"start":{"line":55,"column":6},"end":{"line":55,"column":6}}]},"4":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":4},"end":{"line":61,"column":4}},{"start":{"line":61,"column":4},"end":{"line":61,"column":4}}]},"5":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":6},"end":{"line":62,"column":6}},{"start":{"line":62,"column":6},"end":{"line":62,"column":6}}]},"6":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":4},"end":{"line":68,"column":4}},{"start":{"line":68,"column":4},"end":{"line":68,"column":4}}]},"7":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":32}},{"start":{"line":68,"column":36},"end":{"line":68,"column":59}}]},"8":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":6},"end":{"line":69,"column":6}},{"start":{"line":69,"column":6},"end":{"line":69,"column":6}}]},"9":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":32}},{"start":{"line":70,"column":36},"end":{"line":70,"column":95}},{"start":{"line":71,"column":8},"end":{"line":71,"column":31}},{"start":{"line":71,"column":35},"end":{"line":71,"column":94}}]},"10":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":4},"end":{"line":79,"column":4}},{"start":{"line":79,"column":4},"end":{"line":79,"column":4}}]},"11":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":6},"end":{"line":80,"column":6}},{"start":{"line":80,"column":6},"end":{"line":80,"column":6}}]},"12":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":10},"end":{"line":80,"column":37}},{"start":{"line":80,"column":41},"end":{"line":80,"column":74}}]},"13":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":13},"end":{"line":82,"column":13}},{"start":{"line":82,"column":13},"end":{"line":82,"column":13}}]},"14":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":17},"end":{"line":82,"column":43}},{"start":{"line":82,"column":47},"end":{"line":82,"column":100}}]}},"code":["'use strict';","","const is = require('./is');","","/**"," * Overlay (composite) an image over the processed (resized, extracted etc.) image."," *"," * The overlay image must be the same size or smaller than the processed image."," * If both `top` and `left` options are provided, they take precedence over `gravity`."," *"," * @example"," * sharp('input.png')"," *   .rotate(180)"," *   .resize(300)"," *   .flatten()"," *   .background('#ff6600')"," *   .overlayWith('overlay.png', { gravity: sharp.gravity.southeast } )"," *   .sharpen()"," *   .withMetadata()"," *   .quality(90)"," *   .webp()"," *   .toBuffer()"," *   .then(function(outputBuffer) {"," *     // outputBuffer contains upside down, 300px wide, alpha channel flattened"," *     // onto orange background, composited with overlay.png with SE gravity,"," *     // sharpened, with metadata, 90% quality WebP image data. Phew!"," *   });"," *"," * @param {(Buffer|String)} overlay - Buffer containing image data or String containing the path to an image file."," * @param {Object} [options]"," * @param {String} [options.gravity='centre'] - gravity at which to place the overlay."," * @param {Number} [options.top] - the pixel offset from the top edge."," * @param {Number} [options.left] - the pixel offset from the left edge."," * @param {Boolean} [options.tile=false] - set to true to repeat the overlay image across the entire image with the given `gravity`."," * @param {Boolean} [options.cutout=false] - set to true to apply only the alpha channel of the overlay image to the input image, giving the appearance of one image being cut out of another."," * @param {Number} [options.density=72] - integral number representing the DPI for vector overlay image."," * @param {Object} [options.raw] - describes overlay when using raw pixel data."," * @param {Number} [options.raw.width]"," * @param {Number} [options.raw.height]"," * @param {Number} [options.raw.channels]"," * @param {Object} [options.create] - describes a blank overlay to be created."," * @param {Number} [options.create.width]"," * @param {Number} [options.create.height]"," * @param {Number} [options.create.channels] - 3-4"," * @param {String|Object} [options.create.background] - parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha."," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function overlayWith (overlay, options) {","  this.options.overlay = this._createInputDescriptor(overlay, options, {","    allowStream: false","  });","  if (is.object(options)) {","    if (is.defined(options.tile)) {","      if (is.bool(options.tile)) {","        this.options.overlayTile = options.tile;","      } else {","        throw new Error('Invalid overlay tile ' + options.tile);","      }","    }","    if (is.defined(options.cutout)) {","      if (is.bool(options.cutout)) {","        this.options.overlayCutout = options.cutout;","      } else {","        throw new Error('Invalid overlay cutout ' + options.cutout);","      }","    }","    if (is.defined(options.left) || is.defined(options.top)) {","      if (","        is.integer(options.left) && is.inRange(options.left, 0, this.constructor.maximum.width) &&","        is.integer(options.top) && is.inRange(options.top, 0, this.constructor.maximum.height)","      ) {","        this.options.overlayXOffset = options.left;","        this.options.overlayYOffset = options.top;","      } else {","        throw new Error('Invalid overlay left ' + options.left + ' and/or top ' + options.top);","      }","    }","    if (is.defined(options.gravity)) {","      if (is.integer(options.gravity) && is.inRange(options.gravity, 0, 8)) {","        this.options.overlayGravity = options.gravity;","      } else if (is.string(options.gravity) && is.integer(this.constructor.gravity[options.gravity])) {","        this.options.overlayGravity = this.constructor.gravity[options.gravity];","      } else {","        throw new Error('Unsupported overlay gravity ' + options.gravity);","      }","    }","  }","  return this;","}","","/**"," * Decorate the Sharp prototype with composite-related functions."," * @private"," */","module.exports = function (Sharp) {","  Sharp.prototype.overlayWith = overlayWith;","};",""],"l":{"3":1,"49":1,"50":0,"53":0,"54":0,"55":0,"56":0,"58":0,"61":0,"62":0,"63":0,"65":0,"68":0,"69":0,"73":0,"74":0,"76":0,"79":0,"80":0,"81":0,"82":0,"83":0,"85":0,"89":0,"96":1,"97":1}},"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/operation.js":{"path":"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/operation.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":1,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1,"65":0,"66":0,"67":1,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":1,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":1,"82":0,"83":0,"84":1,"85":0,"86":0,"87":1,"88":0,"89":1,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":1,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":1,"114":0,"115":0,"116":0,"117":0,"118":0,"119":1,"120":1,"121":16},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0,0,0,0,0,0,0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0,0,0,0,0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0,0],"55":[0,0],"56":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":16},"fnMap":{"1":{"name":"rotate","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":24}}},"2":{"name":"extract","line":73,"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":27}}},"3":{"name":"(anonymous_3)","line":75,"loc":{"start":{"line":75,"column":45},"end":{"line":75,"column":61}}},"4":{"name":"flip","line":96,"loc":{"start":{"line":96,"column":0},"end":{"line":96,"column":21}}},"5":{"name":"flop","line":107,"loc":{"start":{"line":107,"column":0},"end":{"line":107,"column":21}}},"6":{"name":"sharpen","line":124,"loc":{"start":{"line":124,"column":0},"end":{"line":124,"column":39}}},"7":{"name":"blur","line":164,"loc":{"start":{"line":164,"column":0},"end":{"line":164,"column":22}}},"8":{"name":"extend","line":201,"loc":{"start":{"line":201,"column":0},"end":{"line":201,"column":25}}},"9":{"name":"flatten","line":229,"loc":{"start":{"line":229,"column":0},"end":{"line":229,"column":27}}},"10":{"name":"trim","line":240,"loc":{"start":{"line":240,"column":0},"end":{"line":240,"column":26}}},"11":{"name":"gamma","line":261,"loc":{"start":{"line":261,"column":0},"end":{"line":261,"column":23}}},"12":{"name":"negate","line":278,"loc":{"start":{"line":278,"column":0},"end":{"line":278,"column":25}}},"13":{"name":"normalise","line":288,"loc":{"start":{"line":288,"column":0},"end":{"line":288,"column":31}}},"14":{"name":"normalize","line":298,"loc":{"start":{"line":298,"column":0},"end":{"line":298,"column":31}}},"15":{"name":"convolve","line":327,"loc":{"start":{"line":327,"column":0},"end":{"line":327,"column":27}}},"16":{"name":"(anonymous_16)","line":338,"loc":{"start":{"line":338,"column":40},"end":{"line":338,"column":56}}},"17":{"name":"threshold","line":362,"loc":{"start":{"line":362,"column":0},"end":{"line":362,"column":40}}},"18":{"name":"boolean","line":396,"loc":{"start":{"line":396,"column":0},"end":{"line":396,"column":46}}},"19":{"name":"(anonymous_19)","line":410,"loc":{"start":{"line":410,"column":17},"end":{"line":410,"column":34}}},"20":{"name":"(anonymous_20)","line":428,"loc":{"start":{"line":428,"column":12},"end":{"line":428,"column":25}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":32,"column":0},"end":{"line":41,"column":1}},"3":{"start":{"line":33,"column":2},"end":{"line":39,"column":3}},"4":{"start":{"line":34,"column":4},"end":{"line":34,"column":28}},"5":{"start":{"line":35,"column":9},"end":{"line":39,"column":3}},"6":{"start":{"line":36,"column":4},"end":{"line":36,"column":31}},"7":{"start":{"line":38,"column":4},"end":{"line":38,"column":68}},"8":{"start":{"line":40,"column":2},"end":{"line":40,"column":14}},"9":{"start":{"line":73,"column":0},"end":{"line":88,"column":1}},"10":{"start":{"line":74,"column":2},"end":{"line":74,"column":90}},"11":{"start":{"line":75,"column":2},"end":{"line":82,"column":11}},"12":{"start":{"line":76,"column":4},"end":{"line":76,"column":32}},"13":{"start":{"line":77,"column":4},"end":{"line":81,"column":5}},"14":{"start":{"line":78,"column":6},"end":{"line":78,"column":96}},"15":{"start":{"line":80,"column":6},"end":{"line":80,"column":72}},"16":{"start":{"line":84,"column":2},"end":{"line":86,"column":3}},"17":{"start":{"line":85,"column":4},"end":{"line":85,"column":47}},"18":{"start":{"line":87,"column":2},"end":{"line":87,"column":14}},"19":{"start":{"line":96,"column":0},"end":{"line":99,"column":1}},"20":{"start":{"line":97,"column":2},"end":{"line":97,"column":50}},"21":{"start":{"line":98,"column":2},"end":{"line":98,"column":14}},"22":{"start":{"line":107,"column":0},"end":{"line":110,"column":1}},"23":{"start":{"line":108,"column":2},"end":{"line":108,"column":50}},"24":{"start":{"line":109,"column":2},"end":{"line":109,"column":14}},"25":{"start":{"line":124,"column":0},"end":{"line":154,"column":1}},"26":{"start":{"line":125,"column":2},"end":{"line":152,"column":3}},"27":{"start":{"line":127,"column":4},"end":{"line":127,"column":35}},"28":{"start":{"line":128,"column":9},"end":{"line":152,"column":3}},"29":{"start":{"line":130,"column":4},"end":{"line":130,"column":47}},"30":{"start":{"line":131,"column":9},"end":{"line":152,"column":3}},"31":{"start":{"line":133,"column":4},"end":{"line":133,"column":38}},"32":{"start":{"line":135,"column":4},"end":{"line":141,"column":5}},"33":{"start":{"line":136,"column":6},"end":{"line":140,"column":7}},"34":{"start":{"line":137,"column":8},"end":{"line":137,"column":40}},"35":{"start":{"line":139,"column":8},"end":{"line":139,"column":88}},"36":{"start":{"line":143,"column":4},"end":{"line":149,"column":5}},"37":{"start":{"line":144,"column":6},"end":{"line":148,"column":7}},"38":{"start":{"line":145,"column":8},"end":{"line":145,"column":44}},"39":{"start":{"line":147,"column":8},"end":{"line":147,"column":92}},"40":{"start":{"line":151,"column":4},"end":{"line":151,"column":69}},"41":{"start":{"line":153,"column":2},"end":{"line":153,"column":14}},"42":{"start":{"line":164,"column":0},"end":{"line":178,"column":1}},"43":{"start":{"line":165,"column":2},"end":{"line":176,"column":3}},"44":{"start":{"line":167,"column":4},"end":{"line":167,"column":32}},"45":{"start":{"line":168,"column":9},"end":{"line":176,"column":3}},"46":{"start":{"line":170,"column":4},"end":{"line":170,"column":44}},"47":{"start":{"line":171,"column":9},"end":{"line":176,"column":3}},"48":{"start":{"line":173,"column":4},"end":{"line":173,"column":35}},"49":{"start":{"line":175,"column":4},"end":{"line":175,"column":66}},"50":{"start":{"line":177,"column":2},"end":{"line":177,"column":14}},"51":{"start":{"line":201,"column":0},"end":{"line":222,"column":1}},"52":{"start":{"line":202,"column":2},"end":{"line":220,"column":3}},"53":{"start":{"line":203,"column":4},"end":{"line":203,"column":36}},"54":{"start":{"line":204,"column":4},"end":{"line":204,"column":39}},"55":{"start":{"line":205,"column":4},"end":{"line":205,"column":37}},"56":{"start":{"line":206,"column":4},"end":{"line":206,"column":38}},"57":{"start":{"line":207,"column":9},"end":{"line":220,"column":3}},"58":{"start":{"line":214,"column":4},"end":{"line":214,"column":40}},"59":{"start":{"line":215,"column":4},"end":{"line":215,"column":46}},"60":{"start":{"line":216,"column":4},"end":{"line":216,"column":42}},"61":{"start":{"line":217,"column":4},"end":{"line":217,"column":44}},"62":{"start":{"line":219,"column":4},"end":{"line":219,"column":56}},"63":{"start":{"line":221,"column":2},"end":{"line":221,"column":14}},"64":{"start":{"line":229,"column":0},"end":{"line":232,"column":1}},"65":{"start":{"line":230,"column":2},"end":{"line":230,"column":59}},"66":{"start":{"line":231,"column":2},"end":{"line":231,"column":14}},"67":{"start":{"line":240,"column":0},"end":{"line":249,"column":1}},"68":{"start":{"line":241,"column":2},"end":{"line":247,"column":3}},"69":{"start":{"line":242,"column":4},"end":{"line":242,"column":36}},"70":{"start":{"line":243,"column":9},"end":{"line":247,"column":3}},"71":{"start":{"line":244,"column":4},"end":{"line":244,"column":43}},"72":{"start":{"line":246,"column":4},"end":{"line":246,"column":69}},"73":{"start":{"line":248,"column":2},"end":{"line":248,"column":14}},"74":{"start":{"line":261,"column":0},"end":{"line":271,"column":1}},"75":{"start":{"line":262,"column":2},"end":{"line":269,"column":3}},"76":{"start":{"line":264,"column":4},"end":{"line":264,"column":29}},"77":{"start":{"line":265,"column":9},"end":{"line":269,"column":3}},"78":{"start":{"line":266,"column":4},"end":{"line":266,"column":31}},"79":{"start":{"line":268,"column":4},"end":{"line":268,"column":70}},"80":{"start":{"line":270,"column":2},"end":{"line":270,"column":14}},"81":{"start":{"line":278,"column":0},"end":{"line":281,"column":1}},"82":{"start":{"line":279,"column":2},"end":{"line":279,"column":56}},"83":{"start":{"line":280,"column":2},"end":{"line":280,"column":14}},"84":{"start":{"line":288,"column":0},"end":{"line":291,"column":1}},"85":{"start":{"line":289,"column":2},"end":{"line":289,"column":65}},"86":{"start":{"line":290,"column":2},"end":{"line":290,"column":14}},"87":{"start":{"line":298,"column":0},"end":{"line":300,"column":1}},"88":{"start":{"line":299,"column":2},"end":{"line":299,"column":35}},"89":{"start":{"line":327,"column":0},"end":{"line":351,"column":1}},"90":{"start":{"line":328,"column":2},"end":{"line":335,"column":3}},"91":{"start":{"line":334,"column":4},"end":{"line":334,"column":50}},"92":{"start":{"line":337,"column":2},"end":{"line":341,"column":3}},"93":{"start":{"line":338,"column":4},"end":{"line":340,"column":10}},"94":{"start":{"line":339,"column":6},"end":{"line":339,"column":19}},"95":{"start":{"line":343,"column":2},"end":{"line":345,"column":3}},"96":{"start":{"line":344,"column":4},"end":{"line":344,"column":21}},"97":{"start":{"line":346,"column":2},"end":{"line":348,"column":3}},"98":{"start":{"line":347,"column":4},"end":{"line":347,"column":22}},"99":{"start":{"line":349,"column":2},"end":{"line":349,"column":35}},"100":{"start":{"line":350,"column":2},"end":{"line":350,"column":14}},"101":{"start":{"line":362,"column":0},"end":{"line":378,"column":1}},"102":{"start":{"line":363,"column":2},"end":{"line":371,"column":3}},"103":{"start":{"line":364,"column":4},"end":{"line":364,"column":33}},"104":{"start":{"line":365,"column":9},"end":{"line":371,"column":3}},"105":{"start":{"line":366,"column":4},"end":{"line":366,"column":49}},"106":{"start":{"line":367,"column":9},"end":{"line":371,"column":3}},"107":{"start":{"line":368,"column":4},"end":{"line":368,"column":39}},"108":{"start":{"line":370,"column":4},"end":{"line":370,"column":65}},"109":{"start":{"line":372,"column":2},"end":{"line":376,"column":3}},"110":{"start":{"line":373,"column":4},"end":{"line":373,"column":43}},"111":{"start":{"line":375,"column":4},"end":{"line":375,"column":44}},"112":{"start":{"line":377,"column":2},"end":{"line":377,"column":14}},"113":{"start":{"line":396,"column":0},"end":{"line":404,"column":1}},"114":{"start":{"line":397,"column":2},"end":{"line":397,"column":71}},"115":{"start":{"line":398,"column":2},"end":{"line":402,"column":3}},"116":{"start":{"line":399,"column":4},"end":{"line":399,"column":38}},"117":{"start":{"line":401,"column":4},"end":{"line":401,"column":60}},"118":{"start":{"line":403,"column":2},"end":{"line":403,"column":14}},"119":{"start":{"line":410,"column":0},"end":{"line":431,"column":2}},"120":{"start":{"line":411,"column":2},"end":{"line":430,"column":5}},"121":{"start":{"line":429,"column":4},"end":{"line":429,"column":32}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":2},"end":{"line":33,"column":2}},{"start":{"line":33,"column":2},"end":{"line":33,"column":2}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":9},"end":{"line":35,"column":9}},{"start":{"line":35,"column":9},"end":{"line":35,"column":9}}]},"3":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":13},"end":{"line":35,"column":30}},{"start":{"line":35,"column":34},"end":{"line":35,"column":70}}]},"4":{"line":74,"type":"cond-expr","locations":[{"start":{"line":74,"column":75},"end":{"line":74,"column":80}},{"start":{"line":74,"column":83},"end":{"line":74,"column":89}}]},"5":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":17},"end":{"line":74,"column":42}},{"start":{"line":74,"column":46},"end":{"line":74,"column":72}}]},"6":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":4},"end":{"line":77,"column":4}},{"start":{"line":77,"column":4},"end":{"line":77,"column":4}}]},"7":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":8},"end":{"line":77,"column":25}},{"start":{"line":77,"column":29},"end":{"line":77,"column":39}}]},"8":{"line":78,"type":"cond-expr","locations":[{"start":{"line":78,"column":63},"end":{"line":78,"column":71}},{"start":{"line":78,"column":74},"end":{"line":78,"column":76}}]},"9":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":27},"end":{"line":78,"column":42}},{"start":{"line":78,"column":46},"end":{"line":78,"column":60}}]},"10":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":2},"end":{"line":84,"column":2}},{"start":{"line":84,"column":2},"end":{"line":84,"column":2}}]},"11":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":6},"end":{"line":84,"column":22}},{"start":{"line":84,"column":26},"end":{"line":84,"column":50}}]},"12":{"line":97,"type":"cond-expr","locations":[{"start":{"line":97,"column":38},"end":{"line":97,"column":42}},{"start":{"line":97,"column":45},"end":{"line":97,"column":49}}]},"13":{"line":108,"type":"cond-expr","locations":[{"start":{"line":108,"column":38},"end":{"line":108,"column":42}},{"start":{"line":108,"column":45},"end":{"line":108,"column":49}}]},"14":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":2},"end":{"line":125,"column":2}},{"start":{"line":125,"column":2},"end":{"line":125,"column":2}}]},"15":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":9},"end":{"line":128,"column":9}},{"start":{"line":128,"column":9},"end":{"line":128,"column":9}}]},"16":{"line":130,"type":"cond-expr","locations":[{"start":{"line":130,"column":40},"end":{"line":130,"column":42}},{"start":{"line":130,"column":45},"end":{"line":130,"column":46}}]},"17":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":9},"end":{"line":131,"column":9}},{"start":{"line":131,"column":9},"end":{"line":131,"column":9}}]},"18":{"line":131,"type":"binary-expr","locations":[{"start":{"line":131,"column":13},"end":{"line":131,"column":29}},{"start":{"line":131,"column":33},"end":{"line":131,"column":63}}]},"19":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":4},"end":{"line":135,"column":4}},{"start":{"line":135,"column":4},"end":{"line":135,"column":4}}]},"20":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":6},"end":{"line":136,"column":6}},{"start":{"line":136,"column":6},"end":{"line":136,"column":6}}]},"21":{"line":136,"type":"binary-expr","locations":[{"start":{"line":136,"column":10},"end":{"line":136,"column":25}},{"start":{"line":136,"column":29},"end":{"line":136,"column":55}}]},"22":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":4},"end":{"line":143,"column":4}},{"start":{"line":143,"column":4},"end":{"line":143,"column":4}}]},"23":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":6},"end":{"line":144,"column":6}},{"start":{"line":144,"column":6},"end":{"line":144,"column":6}}]},"24":{"line":144,"type":"binary-expr","locations":[{"start":{"line":144,"column":10},"end":{"line":144,"column":27}},{"start":{"line":144,"column":31},"end":{"line":144,"column":59}}]},"25":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":2},"end":{"line":165,"column":2}},{"start":{"line":165,"column":2},"end":{"line":165,"column":2}}]},"26":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":9},"end":{"line":168,"column":9}},{"start":{"line":168,"column":9},"end":{"line":168,"column":9}}]},"27":{"line":170,"type":"cond-expr","locations":[{"start":{"line":170,"column":37},"end":{"line":170,"column":39}},{"start":{"line":170,"column":42},"end":{"line":170,"column":43}}]},"28":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":9},"end":{"line":171,"column":9}},{"start":{"line":171,"column":9},"end":{"line":171,"column":9}}]},"29":{"line":171,"type":"binary-expr","locations":[{"start":{"line":171,"column":13},"end":{"line":171,"column":29}},{"start":{"line":171,"column":33},"end":{"line":171,"column":61}}]},"30":{"line":202,"type":"if","locations":[{"start":{"line":202,"column":2},"end":{"line":202,"column":2}},{"start":{"line":202,"column":2},"end":{"line":202,"column":2}}]},"31":{"line":202,"type":"binary-expr","locations":[{"start":{"line":202,"column":6},"end":{"line":202,"column":24}},{"start":{"line":202,"column":28},"end":{"line":202,"column":38}}]},"32":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":9},"end":{"line":207,"column":9}},{"start":{"line":207,"column":9},"end":{"line":207,"column":9}}]},"33":{"line":208,"type":"binary-expr","locations":[{"start":{"line":208,"column":4},"end":{"line":208,"column":21}},{"start":{"line":209,"column":4},"end":{"line":209,"column":26}},{"start":{"line":209,"column":30},"end":{"line":209,"column":45}},{"start":{"line":210,"column":4},"end":{"line":210,"column":29}},{"start":{"line":210,"column":33},"end":{"line":210,"column":51}},{"start":{"line":211,"column":4},"end":{"line":211,"column":27}},{"start":{"line":211,"column":31},"end":{"line":211,"column":47}},{"start":{"line":212,"column":4},"end":{"line":212,"column":28}},{"start":{"line":212,"column":32},"end":{"line":212,"column":49}}]},"34":{"line":230,"type":"cond-expr","locations":[{"start":{"line":230,"column":44},"end":{"line":230,"column":51}},{"start":{"line":230,"column":54},"end":{"line":230,"column":58}}]},"35":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":2},"end":{"line":241,"column":2}},{"start":{"line":241,"column":2},"end":{"line":241,"column":2}}]},"36":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":9},"end":{"line":243,"column":9}},{"start":{"line":243,"column":9},"end":{"line":243,"column":9}}]},"37":{"line":243,"type":"binary-expr","locations":[{"start":{"line":243,"column":13},"end":{"line":243,"column":34}},{"start":{"line":243,"column":38},"end":{"line":243,"column":66}}]},"38":{"line":262,"type":"if","locations":[{"start":{"line":262,"column":2},"end":{"line":262,"column":2}},{"start":{"line":262,"column":2},"end":{"line":262,"column":2}}]},"39":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":9},"end":{"line":265,"column":9}},{"start":{"line":265,"column":9},"end":{"line":265,"column":9}}]},"40":{"line":265,"type":"binary-expr","locations":[{"start":{"line":265,"column":13},"end":{"line":265,"column":29}},{"start":{"line":265,"column":33},"end":{"line":265,"column":56}}]},"41":{"line":279,"type":"cond-expr","locations":[{"start":{"line":279,"column":42},"end":{"line":279,"column":48}},{"start":{"line":279,"column":51},"end":{"line":279,"column":55}}]},"42":{"line":289,"type":"cond-expr","locations":[{"start":{"line":289,"column":48},"end":{"line":289,"column":57}},{"start":{"line":289,"column":60},"end":{"line":289,"column":64}}]},"43":{"line":328,"type":"if","locations":[{"start":{"line":328,"column":2},"end":{"line":328,"column":2}},{"start":{"line":328,"column":2},"end":{"line":328,"column":2}}]},"44":{"line":328,"type":"binary-expr","locations":[{"start":{"line":328,"column":6},"end":{"line":328,"column":24}},{"start":{"line":328,"column":28},"end":{"line":328,"column":57}},{"start":{"line":329,"column":6},"end":{"line":329,"column":31}},{"start":{"line":329,"column":35},"end":{"line":329,"column":61}},{"start":{"line":330,"column":6},"end":{"line":330,"column":40}},{"start":{"line":330,"column":44},"end":{"line":330,"column":79}},{"start":{"line":331,"column":6},"end":{"line":331,"column":59}}]},"45":{"line":337,"type":"if","locations":[{"start":{"line":337,"column":2},"end":{"line":337,"column":2}},{"start":{"line":337,"column":2},"end":{"line":337,"column":2}}]},"46":{"line":343,"type":"if","locations":[{"start":{"line":343,"column":2},"end":{"line":343,"column":2}},{"start":{"line":343,"column":2},"end":{"line":343,"column":2}}]},"47":{"line":346,"type":"if","locations":[{"start":{"line":346,"column":2},"end":{"line":346,"column":2}},{"start":{"line":346,"column":2},"end":{"line":346,"column":2}}]},"48":{"line":363,"type":"if","locations":[{"start":{"line":363,"column":2},"end":{"line":363,"column":2}},{"start":{"line":363,"column":2},"end":{"line":363,"column":2}}]},"49":{"line":365,"type":"if","locations":[{"start":{"line":365,"column":9},"end":{"line":365,"column":9}},{"start":{"line":365,"column":9},"end":{"line":365,"column":9}}]},"50":{"line":366,"type":"cond-expr","locations":[{"start":{"line":366,"column":41},"end":{"line":366,"column":44}},{"start":{"line":366,"column":47},"end":{"line":366,"column":48}}]},"51":{"line":367,"type":"if","locations":[{"start":{"line":367,"column":9},"end":{"line":367,"column":9}},{"start":{"line":367,"column":9},"end":{"line":367,"column":9}}]},"52":{"line":367,"type":"binary-expr","locations":[{"start":{"line":367,"column":13},"end":{"line":367,"column":34}},{"start":{"line":367,"column":38},"end":{"line":367,"column":67}}]},"53":{"line":372,"type":"if","locations":[{"start":{"line":372,"column":2},"end":{"line":372,"column":2}},{"start":{"line":372,"column":2},"end":{"line":372,"column":2}}]},"54":{"line":372,"type":"binary-expr","locations":[{"start":{"line":372,"column":6},"end":{"line":372,"column":25}},{"start":{"line":372,"column":29},"end":{"line":372,"column":55}},{"start":{"line":372,"column":59},"end":{"line":372,"column":85}}]},"55":{"line":398,"type":"if","locations":[{"start":{"line":398,"column":2},"end":{"line":398,"column":2}},{"start":{"line":398,"column":2},"end":{"line":398,"column":2}}]},"56":{"line":398,"type":"binary-expr","locations":[{"start":{"line":398,"column":6},"end":{"line":398,"column":25}},{"start":{"line":398,"column":29},"end":{"line":398,"column":71}}]}},"code":["'use strict';","","const is = require('./is');","","/**"," * Rotate the output image by either an explicit angle"," * or auto-orient based on the EXIF `Orientation` tag."," *"," * Use this method without angle to determine the angle from EXIF data."," * Mirroring is supported and may infer the use of a flip operation."," *"," * The use of `rotate` implies the removal of the EXIF `Orientation` tag, if any."," *"," * Method order is important when both rotating and extracting regions,"," * for example `rotate(x).extract(y)` will produce a different result to `extract(y).rotate(x)`."," *"," * @example"," * const pipeline = sharp()"," *   .rotate()"," *   .resize(null, 200)"," *   .toBuffer(function (err, outputBuffer, info) {"," *     // outputBuffer contains 200px high JPEG image data,"," *     // auto-rotated using EXIF Orientation tag"," *     // info.width and info.height contain the dimensions of the resized image"," *   });"," * readableStream.pipe(pipeline);"," *"," * @param {Number} [angle=auto] 0, 90, 180 or 270."," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function rotate (angle) {","  if (!is.defined(angle)) {","    this.options.angle = -1;","  } else if (is.integer(angle) && is.inArray(angle, [0, 90, 180, 270])) {","    this.options.angle = angle;","  } else {","    throw new Error('Unsupported angle (0, 90, 180, 270) ' + angle);","  }","  return this;","}","","/**"," * Extract a region of the image."," *"," * - Use `extract` before `resize` for pre-resize extraction."," * - Use `extract` after `resize` for post-resize extraction."," * - Use `extract` before and after for both."," *"," * @example"," * sharp(input)"," *   .extract({ left: left, top: top, width: width, height: height })"," *   .toFile(output, function(err) {"," *     // Extract a region of the input image, saving in the same format."," *   });"," * @example"," * sharp(input)"," *   .extract({ left: leftOffsetPre, top: topOffsetPre, width: widthPre, height: heightPre })"," *   .resize(width, height)"," *   .extract({ left: leftOffsetPost, top: topOffsetPost, width: widthPost, height: heightPost })"," *   .toFile(output, function(err) {"," *     // Extract a region, resize, then extract from the resized image"," *   });"," *"," * @param {Object} options"," * @param {Number} options.left - zero-indexed offset from left edge"," * @param {Number} options.top - zero-indexed offset from top edge"," * @param {Number} options.width - dimension of extracted image"," * @param {Number} options.height - dimension of extracted image"," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function extract (options) {","  const suffix = this.options.width === -1 && this.options.height === -1 ? 'Pre' : 'Post';","  ['left', 'top', 'width', 'height'].forEach(function (name) {","    const value = options[name];","    if (is.integer(value) && value >= 0) {","      this.options[name + (name === 'left' || name === 'top' ? 'Offset' : '') + suffix] = value;","    } else {","      throw new Error('Non-integer value for ' + name + ' of ' + value);","    }","  }, this);","  // Ensure existing rotation occurs before pre-resize extraction","  if (suffix === 'Pre' && this.options.angle !== 0) {","    this.options.rotateBeforePreExtract = true;","  }","  return this;","}","","/**"," * Flip the image about the vertical Y axis. This always occurs after rotation, if any."," * The use of `flip` implies the removal of the EXIF `Orientation` tag, if any."," * @param {Boolean} [flip=true]"," * @returns {Sharp}"," */","function flip (flip) {","  this.options.flip = is.bool(flip) ? flip : true;","  return this;","}","","/**"," * Flop the image about the horizontal X axis. This always occurs after rotation, if any."," * The use of `flop` implies the removal of the EXIF `Orientation` tag, if any."," * @param {Boolean} [flop=true]"," * @returns {Sharp}"," */","function flop (flop) {","  this.options.flop = is.bool(flop) ? flop : true;","  return this;","}","","/**"," * Sharpen the image."," * When used without parameters, performs a fast, mild sharpen of the output image."," * When a `sigma` is provided, performs a slower, more accurate sharpen of the L channel in the LAB colour space."," * Separate control over the level of sharpening in \"flat\" and \"jagged\" areas is available."," *"," * @param {Number} [sigma] - the sigma of the Gaussian mask, where `sigma = 1 + radius / 2`."," * @param {Number} [flat=1.0] - the level of sharpening to apply to \"flat\" areas."," * @param {Number} [jagged=2.0] - the level of sharpening to apply to \"jagged\" areas."," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function sharpen (sigma, flat, jagged) {","  if (!is.defined(sigma)) {","    // No arguments: default to mild sharpen","    this.options.sharpenSigma = -1;","  } else if (is.bool(sigma)) {","    // Boolean argument: apply mild sharpen?","    this.options.sharpenSigma = sigma ? -1 : 0;","  } else if (is.number(sigma) && is.inRange(sigma, 0.01, 10000)) {","    // Numeric argument: specific sigma","    this.options.sharpenSigma = sigma;","    // Control over flat areas","    if (is.defined(flat)) {","      if (is.number(flat) && is.inRange(flat, 0, 10000)) {","        this.options.sharpenFlat = flat;","      } else {","        throw new Error('Invalid sharpen level for flat areas (0.0 - 10000.0) ' + flat);","      }","    }","    // Control over jagged areas","    if (is.defined(jagged)) {","      if (is.number(jagged) && is.inRange(jagged, 0, 10000)) {","        this.options.sharpenJagged = jagged;","      } else {","        throw new Error('Invalid sharpen level for jagged areas (0.0 - 10000.0) ' + jagged);","      }","    }","  } else {","    throw new Error('Invalid sharpen sigma (0.01 - 10000) ' + sigma);","  }","  return this;","}","","/**"," * Blur the image."," * When used without parameters, performs a fast, mild blur of the output image."," * When a `sigma` is provided, performs a slower, more accurate Gaussian blur."," * @param {Number} [sigma] a value between 0.3 and 1000 representing the sigma of the Gaussian mask, where `sigma = 1 + radius / 2`."," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function blur (sigma) {","  if (!is.defined(sigma)) {","    // No arguments: default to mild blur","    this.options.blurSigma = -1;","  } else if (is.bool(sigma)) {","    // Boolean argument: apply mild blur?","    this.options.blurSigma = sigma ? -1 : 0;","  } else if (is.number(sigma) && is.inRange(sigma, 0.3, 1000)) {","    // Numeric argument: specific sigma","    this.options.blurSigma = sigma;","  } else {","    throw new Error('Invalid blur sigma (0.3 - 1000.0) ' + sigma);","  }","  return this;","}","","/**"," * Extends/pads the edges of the image with the colour provided to the `background` method."," * This operation will always occur after resizing and extraction, if any."," *"," * @example"," * // Resize to 140 pixels wide, then add 10 transparent pixels"," * // to the top, left and right edges and 20 to the bottom edge"," * sharp(input)"," *   .resize(140)"," *   .background({r: 0, g: 0, b: 0, alpha: 0})"," *   .extend({top: 10, bottom: 20, left: 10, right: 10})"," *   ..."," *"," * @param {(Number|Object)} extend - single pixel count to add to all edges or an Object with per-edge counts"," * @param {Number} [extend.top]"," * @param {Number} [extend.left]"," * @param {Number} [extend.bottom]"," * @param {Number} [extend.right]"," * @returns {Sharp}"," * @throws {Error} Invalid parameters","*/","function extend (extend) {","  if (is.integer(extend) && extend > 0) {","    this.options.extendTop = extend;","    this.options.extendBottom = extend;","    this.options.extendLeft = extend;","    this.options.extendRight = extend;","  } else if (","    is.object(extend) &&","    is.integer(extend.top) && extend.top >= 0 &&","    is.integer(extend.bottom) && extend.bottom >= 0 &&","    is.integer(extend.left) && extend.left >= 0 &&","    is.integer(extend.right) && extend.right >= 0","  ) {","    this.options.extendTop = extend.top;","    this.options.extendBottom = extend.bottom;","    this.options.extendLeft = extend.left;","    this.options.extendRight = extend.right;","  } else {","    throw new Error('Invalid edge extension ' + extend);","  }","  return this;","}","","/**"," * Merge alpha transparency channel, if any, with `background`."," * @param {Boolean} [flatten=true]"," * @returns {Sharp}"," */","function flatten (flatten) {","  this.options.flatten = is.bool(flatten) ? flatten : true;","  return this;","}","","/**"," * Trim \"boring\" pixels from all edges that contain values within a percentage similarity of the top-left pixel."," * @param {Number} [tolerance=10] value between 1 and 99 representing the percentage similarity."," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function trim (tolerance) {","  if (!is.defined(tolerance)) {","    this.options.trimTolerance = 10;","  } else if (is.integer(tolerance) && is.inRange(tolerance, 1, 99)) {","    this.options.trimTolerance = tolerance;","  } else {","    throw new Error('Invalid trim tolerance (1 to 99) ' + tolerance);","  }","  return this;","}","","/**"," * Apply a gamma correction by reducing the encoding (darken) pre-resize at a factor of `1/gamma`"," * then increasing the encoding (brighten) post-resize at a factor of `gamma`."," * This can improve the perceived brightness of a resized image in non-linear colour spaces."," * JPEG and WebP input images will not take advantage of the shrink-on-load performance optimisation"," * when applying a gamma correction."," * @param {Number} [gamma=2.2] value between 1.0 and 3.0."," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function gamma (gamma) {","  if (!is.defined(gamma)) {","    // Default gamma correction of 2.2 (sRGB)","    this.options.gamma = 2.2;","  } else if (is.number(gamma) && is.inRange(gamma, 1, 3)) {","    this.options.gamma = gamma;","  } else {","    throw new Error('Invalid gamma correction (1.0 to 3.0) ' + gamma);","  }","  return this;","}","","/**"," * Produce the \"negative\" of the image."," * @param {Boolean} [negate=true]"," * @returns {Sharp}"," */","function negate (negate) {","  this.options.negate = is.bool(negate) ? negate : true;","  return this;","}","","/**"," * Enhance output image contrast by stretching its luminance to cover the full dynamic range."," * @param {Boolean} [normalise=true]"," * @returns {Sharp}"," */","function normalise (normalise) {","  this.options.normalise = is.bool(normalise) ? normalise : true;","  return this;","}","","/**"," * Alternative spelling of normalise."," * @param {Boolean} [normalize=true]"," * @returns {Sharp}"," */","function normalize (normalize) {","  return this.normalise(normalize);","}","","/**"," * Convolve the image with the specified kernel."," *"," * @example"," * sharp(input)"," *   .convolve({"," *     width: 3,"," *     height: 3,"," *     kernel: [-1, 0, 1, -2, 0, 2, -1, 0, 1]"," *   })"," *   .raw()"," *   .toBuffer(function(err, data, info) {"," *     // data contains the raw pixel data representing the convolution"," *     // of the input image with the horizontal Sobel operator"," *   });"," *"," * @param {Object} kernel"," * @param {Number} kernel.width - width of the kernel in pixels."," * @param {Number} kernel.height - width of the kernel in pixels."," * @param {Array<Number>} kernel.kernel - Array of length `width*height` containing the kernel values."," * @param {Number} [kernel.scale=sum] - the scale of the kernel in pixels."," * @param {Number} [kernel.offset=0] - the offset of the kernel in pixels."," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function convolve (kernel) {","  if (!is.object(kernel) || !Array.isArray(kernel.kernel) ||","      !is.integer(kernel.width) || !is.integer(kernel.height) ||","      !is.inRange(kernel.width, 3, 1001) || !is.inRange(kernel.height, 3, 1001) ||","      kernel.height * kernel.width !== kernel.kernel.length","     ) {","    // must pass in a kernel","    throw new Error('Invalid convolution kernel');","  }","  // Default scale is sum of kernel values","  if (!is.integer(kernel.scale)) {","    kernel.scale = kernel.kernel.reduce(function (a, b) {","      return a + b;","    }, 0);","  }","  // Clip scale to a minimum value of 1","  if (kernel.scale < 1) {","    kernel.scale = 1;","  }","  if (!is.integer(kernel.offset)) {","    kernel.offset = 0;","  }","  this.options.convKernel = kernel;","  return this;","}","","/**"," * Any pixel value greather than or equal to the threshold value will be set to 255, otherwise it will be set to 0."," * @param {Number} [threshold=128] - a value in the range 0-255 representing the level at which the threshold will be applied."," * @param {Object} [options]"," * @param {Boolean} [options.greyscale=true] - convert to single channel greyscale."," * @param {Boolean} [options.grayscale=true] - alternative spelling for greyscale."," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function threshold (threshold, options) {","  if (!is.defined(threshold)) {","    this.options.threshold = 128;","  } else if (is.bool(threshold)) {","    this.options.threshold = threshold ? 128 : 0;","  } else if (is.integer(threshold) && is.inRange(threshold, 0, 255)) {","    this.options.threshold = threshold;","  } else {","    throw new Error('Invalid threshold (0 to 255) ' + threshold);","  }","  if (!is.object(options) || options.greyscale === true || options.grayscale === true) {","    this.options.thresholdGrayscale = true;","  } else {","    this.options.thresholdGrayscale = false;","  }","  return this;","}","","/**"," * Perform a bitwise boolean operation with operand image."," *"," * This operation creates an output image where each pixel is the result of"," * the selected bitwise boolean `operation` between the corresponding pixels of the input images."," *"," * @param {Buffer|String} operand - Buffer containing image data or String containing the path to an image file."," * @param {String} operator - one of `and`, `or` or `eor` to perform that bitwise operation, like the C logic operators `&`, `|` and `^` respectively."," * @param {Object} [options]"," * @param {Object} [options.raw] - describes operand when using raw pixel data."," * @param {Number} [options.raw.width]"," * @param {Number} [options.raw.height]"," * @param {Number} [options.raw.channels]"," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function boolean (operand, operator, options) {","  this.options.boolean = this._createInputDescriptor(operand, options);","  if (is.string(operator) && is.inArray(operator, ['and', 'or', 'eor'])) {","    this.options.booleanOp = operator;","  } else {","    throw new Error('Invalid boolean operator ' + operator);","  }","  return this;","}","","/**"," * Decorate the Sharp prototype with operation-related functions."," * @private"," */","module.exports = function (Sharp) {","  [","    rotate,","    extract,","    flip,","    flop,","    sharpen,","    blur,","    extend,","    flatten,","    trim,","    gamma,","    negate,","    normalise,","    normalize,","    convolve,","    threshold,","    boolean","  ].forEach(function (f) {","    Sharp.prototype[f.name] = f;","  });","};",""],"l":{"3":1,"32":1,"33":0,"34":0,"35":0,"36":0,"38":0,"40":0,"73":1,"74":0,"75":0,"76":0,"77":0,"78":0,"80":0,"84":0,"85":0,"87":0,"96":1,"97":0,"98":0,"107":1,"108":0,"109":0,"124":1,"125":0,"127":0,"128":0,"130":0,"131":0,"133":0,"135":0,"136":0,"137":0,"139":0,"143":0,"144":0,"145":0,"147":0,"151":0,"153":0,"164":1,"165":0,"167":0,"168":0,"170":0,"171":0,"173":0,"175":0,"177":0,"201":1,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"214":0,"215":0,"216":0,"217":0,"219":0,"221":0,"229":1,"230":0,"231":0,"240":1,"241":0,"242":0,"243":0,"244":0,"246":0,"248":0,"261":1,"262":0,"264":0,"265":0,"266":0,"268":0,"270":0,"278":1,"279":0,"280":0,"288":1,"289":0,"290":0,"298":1,"299":0,"327":1,"328":0,"334":0,"337":0,"338":0,"339":0,"343":0,"344":0,"346":0,"347":0,"349":0,"350":0,"362":1,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"370":0,"372":0,"373":0,"375":0,"377":0,"396":1,"397":0,"398":0,"399":0,"401":0,"403":0,"410":1,"411":1,"429":16}},"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/colour.js":{"path":"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/colour.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":1,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":1,"21":1,"22":5,"23":1,"24":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":1,"7":5},"fnMap":{"1":{"name":"background","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":27}}},"2":{"name":"greyscale","line":51,"loc":{"start":{"line":51,"column":0},"end":{"line":51,"column":31}}},"3":{"name":"grayscale","line":61,"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":31}}},"4":{"name":"toColourspace","line":72,"loc":{"start":{"line":72,"column":0},"end":{"line":72,"column":37}}},"5":{"name":"toColorspace","line":86,"loc":{"start":{"line":86,"column":0},"end":{"line":86,"column":35}}},"6":{"name":"(anonymous_6)","line":94,"loc":{"start":{"line":94,"column":17},"end":{"line":94,"column":34}}},"7":{"name":"(anonymous_7)","line":102,"loc":{"start":{"line":102,"column":12},"end":{"line":102,"column":25}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"3":{"start":{"line":10,"column":0},"end":{"line":16,"column":2}},"4":{"start":{"line":30,"column":0},"end":{"line":39,"column":1}},"5":{"start":{"line":31,"column":2},"end":{"line":31,"column":29}},"6":{"start":{"line":32,"column":2},"end":{"line":37,"column":4}},"7":{"start":{"line":38,"column":2},"end":{"line":38,"column":14}},"8":{"start":{"line":51,"column":0},"end":{"line":54,"column":1}},"9":{"start":{"line":52,"column":2},"end":{"line":52,"column":65}},"10":{"start":{"line":53,"column":2},"end":{"line":53,"column":14}},"11":{"start":{"line":61,"column":0},"end":{"line":63,"column":1}},"12":{"start":{"line":62,"column":2},"end":{"line":62,"column":35}},"13":{"start":{"line":72,"column":0},"end":{"line":78,"column":1}},"14":{"start":{"line":73,"column":2},"end":{"line":75,"column":3}},"15":{"start":{"line":74,"column":4},"end":{"line":74,"column":65}},"16":{"start":{"line":76,"column":2},"end":{"line":76,"column":41}},"17":{"start":{"line":77,"column":2},"end":{"line":77,"column":14}},"18":{"start":{"line":86,"column":0},"end":{"line":88,"column":1}},"19":{"start":{"line":87,"column":2},"end":{"line":87,"column":40}},"20":{"start":{"line":94,"column":0},"end":{"line":108,"column":2}},"21":{"start":{"line":96,"column":2},"end":{"line":104,"column":5}},"22":{"start":{"line":103,"column":4},"end":{"line":103,"column":32}},"23":{"start":{"line":106,"column":2},"end":{"line":106,"column":34}},"24":{"start":{"line":107,"column":2},"end":{"line":107,"column":33}}},"branchMap":{"1":{"line":52,"type":"cond-expr","locations":[{"start":{"line":52,"column":48},"end":{"line":52,"column":57}},{"start":{"line":52,"column":60},"end":{"line":52,"column":64}}]},"2":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":2},"end":{"line":73,"column":2}},{"start":{"line":73,"column":2},"end":{"line":73,"column":2}}]}},"code":["'use strict';","","const color = require('color');","const is = require('./is');","","/**"," * Colourspaces."," * @private"," */","const colourspace = {","  multiband: 'multiband',","  'b-w': 'b-w',","  bw: 'b-w',","  cmyk: 'cmyk',","  srgb: 'srgb'","};","","/**"," * Set the background for the `embed`, `flatten` and `extend` operations."," * The default background is `{r: 0, g: 0, b: 0, alpha: 1}`, black without transparency."," *"," * Delegates to the _color_ module, which can throw an Error"," * but is liberal in what it accepts, clipping values to sensible min/max."," * The alpha value is a float between `0` (transparent) and `1` (opaque)."," *"," * @param {String|Object} rgba - parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha."," * @returns {Sharp}"," * @throws {Error} Invalid parameter"," */","function background (rgba) {","  const colour = color(rgba);","  this.options.background = [","    colour.red(),","    colour.green(),","    colour.blue(),","    Math.round(colour.alpha() * 255)","  ];","  return this;","}","","/**"," * Convert to 8-bit greyscale; 256 shades of grey."," * This is a linear operation. If the input image is in a non-linear colour space such as sRGB, use `gamma()` with `greyscale()` for the best results."," * By default the output image will be web-friendly sRGB and contain three (identical) color channels."," * This may be overridden by other sharp operations such as `toColourspace('b-w')`,"," * which will produce an output image containing one color channel."," * An alpha channel may be present, and will be unchanged by the operation."," * @param {Boolean} [greyscale=true]"," * @returns {Sharp}"," */","function greyscale (greyscale) {","  this.options.greyscale = is.bool(greyscale) ? greyscale : true;","  return this;","}","","/**"," * Alternative spelling of `greyscale`."," * @param {Boolean} [grayscale=true]"," * @returns {Sharp}"," */","function grayscale (grayscale) {","  return this.greyscale(grayscale);","}","","/**"," * Set the output colourspace."," * By default output image will be web-friendly sRGB, with additional channels interpreted as alpha channels."," * @param {String} [colourspace] - output colourspace e.g. `srgb`, `rgb`, `cmyk`, `lab`, `b-w` [...](https://github.com/jcupitt/libvips/blob/master/libvips/iofuncs/enumtypes.c#L568)"," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function toColourspace (colourspace) {","  if (!is.string(colourspace)) {","    throw new Error('Invalid output colourspace ' + colourspace);","  }","  this.options.colourspace = colourspace;","  return this;","}","","/**"," * Alternative spelling of `toColourspace`."," * @param {String} [colorspace] - output colorspace."," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function toColorspace (colorspace) {","  return this.toColourspace(colorspace);","}","","/**"," * Decorate the Sharp prototype with colour-related functions."," * @private"," */","module.exports = function (Sharp) {","  // Public instance functions","  [","    background,","    greyscale,","    grayscale,","    toColourspace,","    toColorspace","  ].forEach(function (f) {","    Sharp.prototype[f.name] = f;","  });","  // Class attributes","  Sharp.colourspace = colourspace;","  Sharp.colorspace = colourspace;","};",""],"l":{"3":1,"4":1,"10":1,"30":1,"31":0,"32":0,"38":0,"51":1,"52":0,"53":0,"61":1,"62":0,"72":1,"73":0,"74":0,"76":0,"77":0,"86":1,"87":0,"94":1,"96":1,"103":5,"106":1,"107":1}},"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/channel.js":{"path":"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/channel.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":1,"26":1,"27":3,"28":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":1,"6":3},"fnMap":{"1":{"name":"extractChannel","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":34}}},"2":{"name":"joinChannel","line":62,"loc":{"start":{"line":62,"column":0},"end":{"line":62,"column":39}}},"3":{"name":"(anonymous_3)","line":64,"loc":{"start":{"line":64,"column":19},"end":{"line":64,"column":36}}},"4":{"name":"bandbool","line":89,"loc":{"start":{"line":89,"column":0},"end":{"line":89,"column":27}}},"5":{"name":"(anonymous_5)","line":102,"loc":{"start":{"line":102,"column":17},"end":{"line":102,"column":34}}},"6":{"name":"(anonymous_6)","line":108,"loc":{"start":{"line":108,"column":12},"end":{"line":108,"column":25}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":9,"column":0},"end":{"line":13,"column":2}},"3":{"start":{"line":30,"column":0},"end":{"line":44,"column":1}},"4":{"start":{"line":31,"column":2},"end":{"line":37,"column":3}},"5":{"start":{"line":32,"column":4},"end":{"line":32,"column":16}},"6":{"start":{"line":33,"column":9},"end":{"line":37,"column":3}},"7":{"start":{"line":34,"column":4},"end":{"line":34,"column":16}},"8":{"start":{"line":35,"column":9},"end":{"line":37,"column":3}},"9":{"start":{"line":36,"column":4},"end":{"line":36,"column":16}},"10":{"start":{"line":38,"column":2},"end":{"line":42,"column":3}},"11":{"start":{"line":39,"column":4},"end":{"line":39,"column":42}},"12":{"start":{"line":41,"column":4},"end":{"line":41,"column":65}},"13":{"start":{"line":43,"column":2},"end":{"line":43,"column":14}},"14":{"start":{"line":62,"column":0},"end":{"line":71,"column":1}},"15":{"start":{"line":63,"column":2},"end":{"line":69,"column":3}},"16":{"start":{"line":64,"column":4},"end":{"line":66,"column":13}},"17":{"start":{"line":65,"column":6},"end":{"line":65,"column":83}},"18":{"start":{"line":68,"column":4},"end":{"line":68,"column":82}},"19":{"start":{"line":70,"column":2},"end":{"line":70,"column":14}},"20":{"start":{"line":89,"column":0},"end":{"line":96,"column":1}},"21":{"start":{"line":90,"column":2},"end":{"line":94,"column":3}},"22":{"start":{"line":91,"column":4},"end":{"line":91,"column":37}},"23":{"start":{"line":93,"column":4},"end":{"line":93,"column":60}},"24":{"start":{"line":95,"column":2},"end":{"line":95,"column":14}},"25":{"start":{"line":102,"column":0},"end":{"line":113,"column":2}},"26":{"start":{"line":104,"column":2},"end":{"line":110,"column":5}},"27":{"start":{"line":109,"column":4},"end":{"line":109,"column":32}},"28":{"start":{"line":112,"column":2},"end":{"line":112,"column":20}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":2},"end":{"line":31,"column":2}},{"start":{"line":31,"column":2},"end":{"line":31,"column":2}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":9},"end":{"line":33,"column":9}},{"start":{"line":33,"column":9},"end":{"line":33,"column":9}}]},"3":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":9},"end":{"line":35,"column":9}},{"start":{"line":35,"column":9},"end":{"line":35,"column":9}}]},"4":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":2},"end":{"line":38,"column":2}},{"start":{"line":38,"column":2},"end":{"line":38,"column":2}}]},"5":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":25}},{"start":{"line":38,"column":29},"end":{"line":38,"column":54}}]},"6":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":2},"end":{"line":63,"column":2}},{"start":{"line":63,"column":2},"end":{"line":63,"column":2}}]},"7":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":2},"end":{"line":90,"column":2}},{"start":{"line":90,"column":2},"end":{"line":90,"column":2}}]},"8":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":6},"end":{"line":90,"column":23}},{"start":{"line":90,"column":27},"end":{"line":90,"column":67}}]}},"code":["'use strict';","","const is = require('./is');","","/**"," * Boolean operations for bandbool."," * @private"," */","const bool = {","  and: 'and',","  or: 'or',","  eor: 'eor'","};","","/**"," * Extract a single channel from a multi-channel image."," *"," * @example"," * sharp(input)"," *   .extractChannel('green')"," *   .toFile('input_green.jpg', function(err, info) {"," *     // info.channels === 1"," *     // input_green.jpg contains the green channel of the input image"," *    });"," *"," * @param {Number|String} channel - zero-indexed band number to extract, or `red`, `green` or `blue` as alternative to `0`, `1` or `2` respectively."," * @returns {Sharp}"," * @throws {Error} Invalid channel"," */","function extractChannel (channel) {","  if (channel === 'red') {","    channel = 0;","  } else if (channel === 'green') {","    channel = 1;","  } else if (channel === 'blue') {","    channel = 2;","  }","  if (is.integer(channel) && is.inRange(channel, 0, 4)) {","    this.options.extractChannel = channel;","  } else {","    throw new Error('Cannot extract invalid channel ' + channel);","  }","  return this;","}","","/**"," * Join one or more channels to the image."," * The meaning of the added channels depends on the output colourspace, set with `toColourspace()`."," * By default the output image will be web-friendly sRGB, with additional channels interpreted as alpha channels."," * Channel ordering follows vips convention:"," * - sRGB: 0: Red, 1: Green, 2: Blue, 3: Alpha."," * - CMYK: 0: Magenta, 1: Cyan, 2: Yellow, 3: Black, 4: Alpha."," *"," * Buffers may be any of the image formats supported by sharp: JPEG, PNG, WebP, GIF, SVG, TIFF or raw pixel image data."," * For raw pixel input, the `options` object should contain a `raw` attribute, which follows the format of the attribute of the same name in the `sharp()` constructor."," *"," * @param {Array<String|Buffer>|String|Buffer} images - one or more images (file paths, Buffers)."," * @param {Object} options - image options, see `sharp()` constructor."," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function joinChannel (images, options) {","  if (Array.isArray(images)) {","    images.forEach(function (image) {","      this.options.joinChannelIn.push(this._createInputDescriptor(image, options));","    }, this);","  } else {","    this.options.joinChannelIn.push(this._createInputDescriptor(images, options));","  }","  return this;","}","","/**"," * Perform a bitwise boolean operation on all input image channels (bands) to produce a single channel output image."," *"," * @example"," * sharp('3-channel-rgb-input.png')"," *   .bandbool(sharp.bool.and)"," *   .toFile('1-channel-output.png', function (err, info) {"," *     // The output will be a single channel image where each pixel `P = R & G & B`."," *     // If `I(1,1) = [247, 170, 14] = [0b11110111, 0b10101010, 0b00001111]`"," *     // then `O(1,1) = 0b11110111 & 0b10101010 & 0b00001111 = 0b00000010 = 2`."," *   });"," *"," * @param {String} boolOp - one of `and`, `or` or `eor` to perform that bitwise operation, like the C logic operators `&`, `|` and `^` respectively."," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function bandbool (boolOp) {","  if (is.string(boolOp) && is.inArray(boolOp, ['and', 'or', 'eor'])) {","    this.options.bandBoolOp = boolOp;","  } else {","    throw new Error('Invalid bandbool operation ' + boolOp);","  }","  return this;","}","","/**"," * Decorate the Sharp prototype with channel-related functions."," * @private"," */","module.exports = function (Sharp) {","  // Public instance functions","  [","    extractChannel,","    joinChannel,","    bandbool","  ].forEach(function (f) {","    Sharp.prototype[f.name] = f;","  });","  // Class attributes","  Sharp.bool = bool;","};",""],"l":{"3":1,"9":1,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"38":0,"39":0,"41":0,"43":0,"62":1,"63":0,"64":0,"65":0,"68":0,"70":0,"89":1,"90":0,"91":0,"93":0,"95":0,"102":1,"104":1,"109":3,"112":1}},"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/output.js":{"path":"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/output.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":1,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":1,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":1,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":1,"96":0,"97":1,"98":0,"99":0,"100":0,"101":0,"102":0,"103":1,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":1,"129":0,"130":0,"131":1,"132":0,"133":0,"134":0,"135":1,"136":0,"137":0,"138":0,"139":1,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":1,"191":0,"192":0,"193":0,"194":0,"195":0,"196":1,"197":0,"198":0,"199":0,"200":0,"201":0,"202":1,"203":0,"204":0,"205":0,"206":0,"207":1,"208":0,"209":0,"210":0,"211":0,"212":1,"213":0,"214":0,"215":0,"216":0,"217":1,"218":0,"219":0,"220":0,"221":0,"222":1,"223":0,"224":0,"225":0,"226":0,"227":1,"228":0,"229":0,"230":0,"231":0,"232":1,"233":1,"234":14,"235":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1,"34":14},"fnMap":{"1":{"name":"toFile","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":36}}},"2":{"name":"toBuffer","line":62,"loc":{"start":{"line":62,"column":0},"end":{"line":62,"column":38}}},"3":{"name":"withMetadata","line":80,"loc":{"start":{"line":80,"column":0},"end":{"line":80,"column":37}}},"4":{"name":"jpeg","line":108,"loc":{"start":{"line":108,"column":0},"end":{"line":108,"column":24}}},"5":{"name":"png","line":155,"loc":{"start":{"line":155,"column":0},"end":{"line":155,"column":23}}},"6":{"name":"webp","line":185,"loc":{"start":{"line":185,"column":0},"end":{"line":185,"column":24}}},"7":{"name":"tiff","line":219,"loc":{"start":{"line":219,"column":0},"end":{"line":219,"column":24}}},"8":{"name":"raw","line":252,"loc":{"start":{"line":252,"column":0},"end":{"line":252,"column":16}}},"9":{"name":"toFormat","line":263,"loc":{"start":{"line":263,"column":0},"end":{"line":263,"column":36}}},"10":{"name":"tile","line":297,"loc":{"start":{"line":297,"column":0},"end":{"line":297,"column":21}}},"11":{"name":"_updateFormatOut","line":353,"loc":{"start":{"line":353,"column":0},"end":{"line":353,"column":47}}},"12":{"name":"_setBooleanOption","line":365,"loc":{"start":{"line":365,"column":0},"end":{"line":365,"column":38}}},"13":{"name":"_read","line":377,"loc":{"start":{"line":377,"column":0},"end":{"line":377,"column":18}}},"14":{"name":"_pipeline","line":389,"loc":{"start":{"line":389,"column":0},"end":{"line":389,"column":30}}},"15":{"name":"(anonymous_15)","line":395,"loc":{"start":{"line":395,"column":24},"end":{"line":395,"column":36}}},"16":{"name":"(anonymous_16)","line":410,"loc":{"start":{"line":410,"column":37},"end":{"line":410,"column":64}}},"17":{"name":"(anonymous_17)","line":420,"loc":{"start":{"line":420,"column":26},"end":{"line":420,"column":38}}},"18":{"name":"(anonymous_18)","line":422,"loc":{"start":{"line":422,"column":39},"end":{"line":422,"column":66}}},"19":{"name":"(anonymous_19)","line":435,"loc":{"start":{"line":435,"column":35},"end":{"line":435,"column":62}}},"20":{"name":"(anonymous_20)","line":450,"loc":{"start":{"line":450,"column":25},"end":{"line":450,"column":52}}},"21":{"name":"(anonymous_21)","line":451,"loc":{"start":{"line":451,"column":26},"end":{"line":451,"column":38}}},"22":{"name":"(anonymous_22)","line":453,"loc":{"start":{"line":453,"column":39},"end":{"line":453,"column":66}}},"23":{"name":"(anonymous_23)","line":468,"loc":{"start":{"line":468,"column":25},"end":{"line":468,"column":52}}},"24":{"name":"(anonymous_24)","line":469,"loc":{"start":{"line":469,"column":37},"end":{"line":469,"column":64}}},"25":{"name":"(anonymous_25)","line":487,"loc":{"start":{"line":487,"column":31},"end":{"line":487,"column":50}},"skip":true},"26":{"name":"(anonymous_26)","line":495,"loc":{"start":{"line":495,"column":35},"end":{"line":495,"column":58}},"skip":true},"27":{"name":"(anonymous_27)","line":503,"loc":{"start":{"line":503,"column":40},"end":{"line":503,"column":68}},"skip":true},"28":{"name":"(anonymous_28)","line":510,"loc":{"start":{"line":510,"column":48},"end":{"line":510,"column":84}},"skip":true},"29":{"name":"(anonymous_29)","line":517,"loc":{"start":{"line":517,"column":48},"end":{"line":517,"column":84}},"skip":true},"30":{"name":"(anonymous_30)","line":524,"loc":{"start":{"line":524,"column":43},"end":{"line":524,"column":74}},"skip":true},"31":{"name":"(anonymous_31)","line":531,"loc":{"start":{"line":531,"column":42},"end":{"line":531,"column":72}},"skip":true},"32":{"name":"(anonymous_32)","line":538,"loc":{"start":{"line":538,"column":37},"end":{"line":538,"column":62}},"skip":true},"33":{"name":"(anonymous_33)","line":549,"loc":{"start":{"line":549,"column":17},"end":{"line":549,"column":34}}},"34":{"name":"(anonymous_34)","line":567,"loc":{"start":{"line":567,"column":12},"end":{"line":567,"column":25}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":29}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":53}},"4":{"start":{"line":22,"column":0},"end":{"line":44,"column":1}},"5":{"start":{"line":23,"column":2},"end":{"line":42,"column":3}},"6":{"start":{"line":24,"column":4},"end":{"line":24,"column":57}},"7":{"start":{"line":25,"column":4},"end":{"line":29,"column":5}},"8":{"start":{"line":26,"column":6},"end":{"line":26,"column":33}},"9":{"start":{"line":28,"column":6},"end":{"line":28,"column":46}},"10":{"start":{"line":31,"column":4},"end":{"line":41,"column":5}},"11":{"start":{"line":32,"column":6},"end":{"line":32,"column":86}},"12":{"start":{"line":33,"column":6},"end":{"line":37,"column":7}},"13":{"start":{"line":34,"column":8},"end":{"line":34,"column":35}},"14":{"start":{"line":36,"column":8},"end":{"line":36,"column":48}},"15":{"start":{"line":39,"column":6},"end":{"line":39,"column":37}},"16":{"start":{"line":40,"column":6},"end":{"line":40,"column":38}},"17":{"start":{"line":43,"column":2},"end":{"line":43,"column":14}},"18":{"start":{"line":62,"column":0},"end":{"line":69,"column":1}},"19":{"start":{"line":63,"column":2},"end":{"line":67,"column":3}},"20":{"start":{"line":64,"column":4},"end":{"line":66,"column":5}},"21":{"start":{"line":65,"column":6},"end":{"line":65,"column":65}},"22":{"start":{"line":68,"column":2},"end":{"line":68,"column":61}},"23":{"start":{"line":80,"column":0},"end":{"line":92,"column":1}},"24":{"start":{"line":81,"column":2},"end":{"line":81,"column":74}},"25":{"start":{"line":82,"column":2},"end":{"line":90,"column":3}},"26":{"start":{"line":83,"column":4},"end":{"line":89,"column":5}},"27":{"start":{"line":84,"column":6},"end":{"line":88,"column":7}},"28":{"start":{"line":85,"column":8},"end":{"line":85,"column":72}},"29":{"start":{"line":87,"column":8},"end":{"line":87,"column":84}},"30":{"start":{"line":91,"column":2},"end":{"line":91,"column":14}},"31":{"start":{"line":108,"column":0},"end":{"line":143,"column":1}},"32":{"start":{"line":109,"column":2},"end":{"line":141,"column":3}},"33":{"start":{"line":110,"column":4},"end":{"line":116,"column":5}},"34":{"start":{"line":111,"column":6},"end":{"line":115,"column":7}},"35":{"start":{"line":112,"column":8},"end":{"line":112,"column":51}},"36":{"start":{"line":114,"column":8},"end":{"line":114,"column":79}},"37":{"start":{"line":117,"column":4},"end":{"line":119,"column":5}},"38":{"start":{"line":118,"column":6},"end":{"line":118,"column":69}},"39":{"start":{"line":120,"column":4},"end":{"line":126,"column":5}},"40":{"start":{"line":121,"column":6},"end":{"line":125,"column":7}},"41":{"start":{"line":122,"column":8},"end":{"line":122,"column":71}},"42":{"start":{"line":124,"column":8},"end":{"line":124,"column":97}},"43":{"start":{"line":127,"column":4},"end":{"line":127,"column":131}},"44":{"start":{"line":128,"column":4},"end":{"line":130,"column":5}},"45":{"start":{"line":129,"column":6},"end":{"line":129,"column":85}},"46":{"start":{"line":131,"column":4},"end":{"line":133,"column":5}},"47":{"start":{"line":132,"column":6},"end":{"line":132,"column":83}},"48":{"start":{"line":134,"column":4},"end":{"line":134,"column":107}},"49":{"start":{"line":135,"column":4},"end":{"line":140,"column":5}},"50":{"start":{"line":136,"column":6},"end":{"line":136,"column":73}},"51":{"start":{"line":137,"column":6},"end":{"line":139,"column":7}},"52":{"start":{"line":138,"column":8},"end":{"line":138,"column":44}},"53":{"start":{"line":142,"column":2},"end":{"line":142,"column":48}},"54":{"start":{"line":155,"column":0},"end":{"line":172,"column":1}},"55":{"start":{"line":156,"column":2},"end":{"line":170,"column":3}},"56":{"start":{"line":157,"column":4},"end":{"line":159,"column":5}},"57":{"start":{"line":158,"column":6},"end":{"line":158,"column":68}},"58":{"start":{"line":160,"column":4},"end":{"line":166,"column":5}},"59":{"start":{"line":161,"column":6},"end":{"line":165,"column":7}},"60":{"start":{"line":162,"column":8},"end":{"line":162,"column":68}},"61":{"start":{"line":164,"column":8},"end":{"line":164,"column":95}},"62":{"start":{"line":167,"column":4},"end":{"line":169,"column":5}},"63":{"start":{"line":168,"column":6},"end":{"line":168,"column":80}},"64":{"start":{"line":171,"column":2},"end":{"line":171,"column":47}},"65":{"start":{"line":185,"column":0},"end":{"line":207,"column":1}},"66":{"start":{"line":186,"column":2},"end":{"line":192,"column":3}},"67":{"start":{"line":187,"column":4},"end":{"line":191,"column":5}},"68":{"start":{"line":188,"column":6},"end":{"line":188,"column":49}},"69":{"start":{"line":190,"column":6},"end":{"line":190,"column":77}},"70":{"start":{"line":193,"column":2},"end":{"line":199,"column":3}},"71":{"start":{"line":194,"column":4},"end":{"line":198,"column":5}},"72":{"start":{"line":195,"column":6},"end":{"line":195,"column":59}},"73":{"start":{"line":197,"column":6},"end":{"line":197,"column":93}},"74":{"start":{"line":200,"column":2},"end":{"line":202,"column":3}},"75":{"start":{"line":201,"column":4},"end":{"line":201,"column":61}},"76":{"start":{"line":203,"column":2},"end":{"line":205,"column":3}},"77":{"start":{"line":204,"column":4},"end":{"line":204,"column":69}},"78":{"start":{"line":206,"column":2},"end":{"line":206,"column":48}},"79":{"start":{"line":219,"column":0},"end":{"line":246,"column":1}},"80":{"start":{"line":220,"column":2},"end":{"line":226,"column":3}},"81":{"start":{"line":221,"column":4},"end":{"line":225,"column":5}},"82":{"start":{"line":222,"column":6},"end":{"line":222,"column":49}},"83":{"start":{"line":224,"column":6},"end":{"line":224,"column":77}},"84":{"start":{"line":228,"column":2},"end":{"line":235,"column":3}},"85":{"start":{"line":229,"column":4},"end":{"line":234,"column":5}},"86":{"start":{"line":230,"column":6},"end":{"line":230,"column":57}},"87":{"start":{"line":232,"column":6},"end":{"line":232,"column":120}},"88":{"start":{"line":233,"column":6},"end":{"line":233,"column":31}},"89":{"start":{"line":237,"column":2},"end":{"line":244,"column":3}},"90":{"start":{"line":238,"column":4},"end":{"line":243,"column":5}},"91":{"start":{"line":239,"column":6},"end":{"line":239,"column":53}},"92":{"start":{"line":241,"column":6},"end":{"line":241,"column":115}},"93":{"start":{"line":242,"column":6},"end":{"line":242,"column":31}},"94":{"start":{"line":245,"column":2},"end":{"line":245,"column":48}},"95":{"start":{"line":252,"column":0},"end":{"line":254,"column":1}},"96":{"start":{"line":253,"column":2},"end":{"line":253,"column":38}},"97":{"start":{"line":263,"column":0},"end":{"line":271,"column":1}},"98":{"start":{"line":264,"column":2},"end":{"line":266,"column":3}},"99":{"start":{"line":265,"column":4},"end":{"line":265,"column":23}},"100":{"start":{"line":267,"column":2},"end":{"line":269,"column":3}},"101":{"start":{"line":268,"column":4},"end":{"line":268,"column":59}},"102":{"start":{"line":270,"column":2},"end":{"line":270,"column":31}},"103":{"start":{"line":297,"column":0},"end":{"line":342,"column":1}},"104":{"start":{"line":298,"column":2},"end":{"line":334,"column":3}},"105":{"start":{"line":300,"column":4},"end":{"line":306,"column":5}},"106":{"start":{"line":301,"column":6},"end":{"line":305,"column":7}},"107":{"start":{"line":302,"column":8},"end":{"line":302,"column":42}},"108":{"start":{"line":304,"column":8},"end":{"line":304,"column":70}},"109":{"start":{"line":308,"column":4},"end":{"line":317,"column":5}},"110":{"start":{"line":309,"column":6},"end":{"line":316,"column":7}},"111":{"start":{"line":310,"column":8},"end":{"line":312,"column":9}},"112":{"start":{"line":311,"column":10},"end":{"line":311,"column":120}},"113":{"start":{"line":313,"column":8},"end":{"line":313,"column":48}},"114":{"start":{"line":315,"column":8},"end":{"line":315,"column":76}},"115":{"start":{"line":319,"column":4},"end":{"line":325,"column":5}},"116":{"start":{"line":320,"column":6},"end":{"line":324,"column":7}},"117":{"start":{"line":321,"column":8},"end":{"line":321,"column":52}},"118":{"start":{"line":323,"column":8},"end":{"line":323,"column":68}},"119":{"start":{"line":327,"column":4},"end":{"line":333,"column":5}},"120":{"start":{"line":328,"column":6},"end":{"line":332,"column":7}},"121":{"start":{"line":329,"column":8},"end":{"line":329,"column":46}},"122":{"start":{"line":331,"column":8},"end":{"line":331,"column":62}},"123":{"start":{"line":336,"column":2},"end":{"line":340,"column":3}},"124":{"start":{"line":337,"column":4},"end":{"line":337,"column":53}},"125":{"start":{"line":338,"column":9},"end":{"line":340,"column":3}},"126":{"start":{"line":339,"column":4},"end":{"line":339,"column":69}},"127":{"start":{"line":341,"column":2},"end":{"line":341,"column":37}},"128":{"start":{"line":353,"column":0},"end":{"line":356,"column":1}},"129":{"start":{"line":354,"column":2},"end":{"line":354,"column":97}},"130":{"start":{"line":355,"column":2},"end":{"line":355,"column":14}},"131":{"start":{"line":365,"column":0},"end":{"line":371,"column":1}},"132":{"start":{"line":366,"column":2},"end":{"line":370,"column":3}},"133":{"start":{"line":367,"column":4},"end":{"line":367,"column":28}},"134":{"start":{"line":369,"column":4},"end":{"line":369,"column":60}},"135":{"start":{"line":377,"column":0},"end":{"line":382,"column":1}},"136":{"start":{"line":378,"column":2},"end":{"line":381,"column":3}},"137":{"start":{"line":379,"column":4},"end":{"line":379,"column":34}},"138":{"start":{"line":380,"column":4},"end":{"line":380,"column":21}},"139":{"start":{"line":389,"column":0},"end":{"line":483,"column":1}},"140":{"start":{"line":390,"column":2},"end":{"line":390,"column":20}},"141":{"start":{"line":391,"column":2},"end":{"line":482,"column":3}},"142":{"start":{"line":393,"column":4},"end":{"line":402,"column":5}},"143":{"start":{"line":395,"column":6},"end":{"line":398,"column":9}},"144":{"start":{"line":396,"column":8},"end":{"line":396,"column":32}},"145":{"start":{"line":397,"column":8},"end":{"line":397,"column":47}},"146":{"start":{"line":401,"column":6},"end":{"line":401,"column":45}},"147":{"start":{"line":403,"column":4},"end":{"line":403,"column":16}},"148":{"start":{"line":404,"column":9},"end":{"line":482,"column":3}},"149":{"start":{"line":406,"column":4},"end":{"line":444,"column":5}},"150":{"start":{"line":408,"column":6},"end":{"line":432,"column":7}},"151":{"start":{"line":409,"column":8},"end":{"line":409,"column":32}},"152":{"start":{"line":410,"column":8},"end":{"line":418,"column":11}},"153":{"start":{"line":411,"column":10},"end":{"line":416,"column":11}},"154":{"start":{"line":412,"column":12},"end":{"line":412,"column":36}},"155":{"start":{"line":414,"column":12},"end":{"line":414,"column":36}},"156":{"start":{"line":415,"column":12},"end":{"line":415,"column":28}},"157":{"start":{"line":417,"column":10},"end":{"line":417,"column":26}},"158":{"start":{"line":420,"column":8},"end":{"line":431,"column":11}},"159":{"start":{"line":421,"column":10},"end":{"line":421,"column":34}},"160":{"start":{"line":422,"column":10},"end":{"line":430,"column":13}},"161":{"start":{"line":423,"column":12},"end":{"line":428,"column":13}},"162":{"start":{"line":424,"column":14},"end":{"line":424,"column":38}},"163":{"start":{"line":426,"column":14},"end":{"line":426,"column":38}},"164":{"start":{"line":427,"column":14},"end":{"line":427,"column":30}},"165":{"start":{"line":429,"column":12},"end":{"line":429,"column":28}},"166":{"start":{"line":435,"column":6},"end":{"line":443,"column":9}},"167":{"start":{"line":436,"column":8},"end":{"line":441,"column":9}},"168":{"start":{"line":437,"column":10},"end":{"line":437,"column":34}},"169":{"start":{"line":439,"column":10},"end":{"line":439,"column":34}},"170":{"start":{"line":440,"column":10},"end":{"line":440,"column":26}},"171":{"start":{"line":442,"column":8},"end":{"line":442,"column":24}},"172":{"start":{"line":445,"column":4},"end":{"line":445,"column":16}},"173":{"start":{"line":448,"column":4},"end":{"line":481,"column":5}},"174":{"start":{"line":450,"column":6},"end":{"line":465,"column":9}},"175":{"start":{"line":451,"column":8},"end":{"line":464,"column":11}},"176":{"start":{"line":452,"column":10},"end":{"line":452,"column":34}},"177":{"start":{"line":453,"column":10},"end":{"line":463,"column":13}},"178":{"start":{"line":454,"column":12},"end":{"line":462,"column":13}},"179":{"start":{"line":455,"column":14},"end":{"line":455,"column":26}},"180":{"start":{"line":457,"column":14},"end":{"line":461,"column":15}},"181":{"start":{"line":458,"column":16},"end":{"line":458,"column":52}},"182":{"start":{"line":460,"column":16},"end":{"line":460,"column":30}},"183":{"start":{"line":468,"column":6},"end":{"line":480,"column":9}},"184":{"start":{"line":469,"column":8},"end":{"line":479,"column":11}},"185":{"start":{"line":470,"column":10},"end":{"line":478,"column":11}},"186":{"start":{"line":471,"column":12},"end":{"line":471,"column":24}},"187":{"start":{"line":473,"column":12},"end":{"line":477,"column":13}},"188":{"start":{"line":474,"column":14},"end":{"line":474,"column":50}},"189":{"start":{"line":476,"column":14},"end":{"line":476,"column":28}},"190":{"start":{"line":487,"column":0},"end":{"line":493,"column":104},"skip":true},"191":{"start":{"line":488,"column":2},"end":{"line":488,"column":43},"skip":true},"192":{"start":{"line":489,"column":2},"end":{"line":489,"column":39},"skip":true},"193":{"start":{"line":490,"column":2},"end":{"line":490,"column":49},"skip":true},"194":{"start":{"line":491,"column":2},"end":{"line":491,"column":37},"skip":true},"195":{"start":{"line":492,"column":2},"end":{"line":492,"column":14},"skip":true},"196":{"start":{"line":495,"column":0},"end":{"line":501,"column":91},"skip":true},"197":{"start":{"line":496,"column":2},"end":{"line":496,"column":43},"skip":true},"198":{"start":{"line":497,"column":2},"end":{"line":497,"column":59},"skip":true},"199":{"start":{"line":498,"column":2},"end":{"line":498,"column":34},"skip":true},"200":{"start":{"line":499,"column":2},"end":{"line":499,"column":37},"skip":true},"201":{"start":{"line":500,"column":2},"end":{"line":500,"column":14},"skip":true},"202":{"start":{"line":503,"column":0},"end":{"line":508,"column":67},"skip":true},"203":{"start":{"line":504,"column":2},"end":{"line":504,"column":43},"skip":true},"204":{"start":{"line":505,"column":2},"end":{"line":505,"column":51},"skip":true},"205":{"start":{"line":506,"column":2},"end":{"line":506,"column":37},"skip":true},"206":{"start":{"line":507,"column":2},"end":{"line":507,"column":14},"skip":true},"207":{"start":{"line":510,"column":0},"end":{"line":515,"column":76},"skip":true},"208":{"start":{"line":511,"column":2},"end":{"line":511,"column":43},"skip":true},"209":{"start":{"line":512,"column":2},"end":{"line":512,"column":72},"skip":true},"210":{"start":{"line":513,"column":2},"end":{"line":513,"column":37},"skip":true},"211":{"start":{"line":514,"column":2},"end":{"line":514,"column":14},"skip":true},"212":{"start":{"line":517,"column":0},"end":{"line":522,"column":81},"skip":true},"213":{"start":{"line":518,"column":2},"end":{"line":518,"column":43},"skip":true},"214":{"start":{"line":519,"column":2},"end":{"line":519,"column":93},"skip":true},"215":{"start":{"line":520,"column":2},"end":{"line":520,"column":37},"skip":true},"216":{"start":{"line":521,"column":2},"end":{"line":521,"column":14},"skip":true},"217":{"start":{"line":524,"column":0},"end":{"line":529,"column":74},"skip":true},"218":{"start":{"line":525,"column":2},"end":{"line":525,"column":43},"skip":true},"219":{"start":{"line":526,"column":2},"end":{"line":526,"column":70},"skip":true},"220":{"start":{"line":527,"column":2},"end":{"line":527,"column":37},"skip":true},"221":{"start":{"line":528,"column":2},"end":{"line":528,"column":14},"skip":true},"222":{"start":{"line":531,"column":0},"end":{"line":536,"column":72},"skip":true},"223":{"start":{"line":532,"column":2},"end":{"line":532,"column":43},"skip":true},"224":{"start":{"line":533,"column":2},"end":{"line":533,"column":68},"skip":true},"225":{"start":{"line":534,"column":2},"end":{"line":534,"column":37},"skip":true},"226":{"start":{"line":535,"column":2},"end":{"line":535,"column":14},"skip":true},"227":{"start":{"line":538,"column":0},"end":{"line":543,"column":62},"skip":true},"228":{"start":{"line":539,"column":2},"end":{"line":539,"column":43},"skip":true},"229":{"start":{"line":540,"column":2},"end":{"line":540,"column":58},"skip":true},"230":{"start":{"line":541,"column":2},"end":{"line":541,"column":37},"skip":true},"231":{"start":{"line":542,"column":2},"end":{"line":542,"column":14},"skip":true},"232":{"start":{"line":549,"column":0},"end":{"line":581,"column":2}},"233":{"start":{"line":550,"column":2},"end":{"line":569,"column":5}},"234":{"start":{"line":568,"column":4},"end":{"line":568,"column":32}},"235":{"start":{"line":571,"column":2},"end":{"line":571,"column":36}},"236":{"start":{"line":572,"column":2},"end":{"line":572,"column":44}},"237":{"start":{"line":573,"column":2},"end":{"line":573,"column":54}},"238":{"start":{"line":574,"column":2},"end":{"line":574,"column":70}},"239":{"start":{"line":575,"column":2},"end":{"line":575,"column":70}},"240":{"start":{"line":576,"column":2},"end":{"line":576,"column":60}},"241":{"start":{"line":577,"column":2},"end":{"line":577,"column":60}},"242":{"start":{"line":578,"column":2},"end":{"line":578,"column":58}},"243":{"start":{"line":579,"column":2},"end":{"line":579,"column":48}},"244":{"start":{"line":580,"column":2},"end":{"line":580,"column":48}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":2},"end":{"line":23,"column":2}},{"start":{"line":23,"column":2},"end":{"line":23,"column":2}}]},"2":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":6},"end":{"line":23,"column":14}},{"start":{"line":23,"column":18},"end":{"line":23,"column":38}}]},"3":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"4":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":31,"column":4}},{"start":{"line":31,"column":4},"end":{"line":31,"column":4}}]},"5":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"6":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":2},"end":{"line":63,"column":2}},{"start":{"line":63,"column":2},"end":{"line":63,"column":2}}]},"7":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"8":{"line":68,"type":"cond-expr","locations":[{"start":{"line":68,"column":41},"end":{"line":68,"column":48}},{"start":{"line":68,"column":51},"end":{"line":68,"column":59}}]},"9":{"line":81,"type":"cond-expr","locations":[{"start":{"line":81,"column":54},"end":{"line":81,"column":66}},{"start":{"line":81,"column":69},"end":{"line":81,"column":73}}]},"10":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":2},"end":{"line":82,"column":2}},{"start":{"line":82,"column":2},"end":{"line":82,"column":2}}]},"11":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":4},"end":{"line":83,"column":4}},{"start":{"line":83,"column":4},"end":{"line":83,"column":4}}]},"12":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":6},"end":{"line":84,"column":6}},{"start":{"line":84,"column":6},"end":{"line":84,"column":6}}]},"13":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":10},"end":{"line":84,"column":46}},{"start":{"line":84,"column":50},"end":{"line":84,"column":92}}]},"14":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":2},"end":{"line":109,"column":2}},{"start":{"line":109,"column":2},"end":{"line":109,"column":2}}]},"15":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":4},"end":{"line":110,"column":4}},{"start":{"line":110,"column":4},"end":{"line":110,"column":4}}]},"16":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":6},"end":{"line":111,"column":6}},{"start":{"line":111,"column":6},"end":{"line":111,"column":6}}]},"17":{"line":111,"type":"binary-expr","locations":[{"start":{"line":111,"column":10},"end":{"line":111,"column":37}},{"start":{"line":111,"column":41},"end":{"line":111,"column":76}}]},"18":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":4},"end":{"line":117,"column":4}},{"start":{"line":117,"column":4},"end":{"line":117,"column":4}}]},"19":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":4},"end":{"line":120,"column":4}},{"start":{"line":120,"column":4},"end":{"line":120,"column":4}}]},"20":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":6},"end":{"line":121,"column":6}},{"start":{"line":121,"column":6},"end":{"line":121,"column":6}}]},"21":{"line":121,"type":"binary-expr","locations":[{"start":{"line":121,"column":10},"end":{"line":121,"column":46}},{"start":{"line":121,"column":50},"end":{"line":121,"column":107}}]},"22":{"line":127,"type":"cond-expr","locations":[{"start":{"line":127,"column":73},"end":{"line":127,"column":100}},{"start":{"line":127,"column":103},"end":{"line":127,"column":130}}]},"23":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":4},"end":{"line":128,"column":4}},{"start":{"line":128,"column":4},"end":{"line":128,"column":4}}]},"24":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":4},"end":{"line":131,"column":4}},{"start":{"line":131,"column":4},"end":{"line":131,"column":4}}]},"25":{"line":134,"type":"cond-expr","locations":[{"start":{"line":134,"column":61},"end":{"line":134,"column":82}},{"start":{"line":134,"column":85},"end":{"line":134,"column":106}}]},"26":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":4},"end":{"line":135,"column":4}},{"start":{"line":135,"column":4},"end":{"line":135,"column":4}}]},"27":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":6},"end":{"line":137,"column":6}},{"start":{"line":137,"column":6},"end":{"line":137,"column":6}}]},"28":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":2},"end":{"line":156,"column":2}},{"start":{"line":156,"column":2},"end":{"line":156,"column":2}}]},"29":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":4},"end":{"line":157,"column":4}},{"start":{"line":157,"column":4},"end":{"line":157,"column":4}}]},"30":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":4},"end":{"line":160,"column":4}},{"start":{"line":160,"column":4},"end":{"line":160,"column":4}}]},"31":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":6},"end":{"line":161,"column":6}},{"start":{"line":161,"column":6},"end":{"line":161,"column":6}}]},"32":{"line":161,"type":"binary-expr","locations":[{"start":{"line":161,"column":10},"end":{"line":161,"column":46}},{"start":{"line":161,"column":50},"end":{"line":161,"column":92}}]},"33":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":4},"end":{"line":167,"column":4}},{"start":{"line":167,"column":4},"end":{"line":167,"column":4}}]},"34":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":2},"end":{"line":186,"column":2}},{"start":{"line":186,"column":2},"end":{"line":186,"column":2}}]},"35":{"line":186,"type":"binary-expr","locations":[{"start":{"line":186,"column":6},"end":{"line":186,"column":24}},{"start":{"line":186,"column":28},"end":{"line":186,"column":55}}]},"36":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":4},"end":{"line":187,"column":4}},{"start":{"line":187,"column":4},"end":{"line":187,"column":4}}]},"37":{"line":187,"type":"binary-expr","locations":[{"start":{"line":187,"column":8},"end":{"line":187,"column":35}},{"start":{"line":187,"column":39},"end":{"line":187,"column":74}}]},"38":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":2},"end":{"line":193,"column":2}},{"start":{"line":193,"column":2},"end":{"line":193,"column":2}}]},"39":{"line":193,"type":"binary-expr","locations":[{"start":{"line":193,"column":6},"end":{"line":193,"column":24}},{"start":{"line":193,"column":28},"end":{"line":193,"column":60}}]},"40":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":4},"end":{"line":194,"column":4}},{"start":{"line":194,"column":4},"end":{"line":194,"column":4}}]},"41":{"line":194,"type":"binary-expr","locations":[{"start":{"line":194,"column":8},"end":{"line":194,"column":40}},{"start":{"line":194,"column":44},"end":{"line":194,"column":84}}]},"42":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":2},"end":{"line":200,"column":2}},{"start":{"line":200,"column":2},"end":{"line":200,"column":2}}]},"43":{"line":200,"type":"binary-expr","locations":[{"start":{"line":200,"column":6},"end":{"line":200,"column":24}},{"start":{"line":200,"column":28},"end":{"line":200,"column":56}}]},"44":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":2},"end":{"line":203,"column":2}},{"start":{"line":203,"column":2},"end":{"line":203,"column":2}}]},"45":{"line":203,"type":"binary-expr","locations":[{"start":{"line":203,"column":6},"end":{"line":203,"column":24}},{"start":{"line":203,"column":28},"end":{"line":203,"column":60}}]},"46":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":2},"end":{"line":220,"column":2}},{"start":{"line":220,"column":2},"end":{"line":220,"column":2}}]},"47":{"line":220,"type":"binary-expr","locations":[{"start":{"line":220,"column":6},"end":{"line":220,"column":24}},{"start":{"line":220,"column":28},"end":{"line":220,"column":55}}]},"48":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":4},"end":{"line":221,"column":4}},{"start":{"line":221,"column":4},"end":{"line":221,"column":4}}]},"49":{"line":221,"type":"binary-expr","locations":[{"start":{"line":221,"column":8},"end":{"line":221,"column":35}},{"start":{"line":221,"column":39},"end":{"line":221,"column":74}}]},"50":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":2},"end":{"line":228,"column":2}},{"start":{"line":228,"column":2},"end":{"line":228,"column":2}}]},"51":{"line":228,"type":"binary-expr","locations":[{"start":{"line":228,"column":6},"end":{"line":228,"column":25}},{"start":{"line":228,"column":29},"end":{"line":228,"column":60}}]},"52":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":4},"end":{"line":229,"column":4}},{"start":{"line":229,"column":4},"end":{"line":229,"column":4}}]},"53":{"line":229,"type":"binary-expr","locations":[{"start":{"line":229,"column":8},"end":{"line":229,"column":38}},{"start":{"line":229,"column":42},"end":{"line":229,"column":109}}]},"54":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":2},"end":{"line":237,"column":2}},{"start":{"line":237,"column":2},"end":{"line":237,"column":2}}]},"55":{"line":237,"type":"binary-expr","locations":[{"start":{"line":237,"column":6},"end":{"line":237,"column":25}},{"start":{"line":237,"column":29},"end":{"line":237,"column":58}}]},"56":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":4},"end":{"line":238,"column":4}},{"start":{"line":238,"column":4},"end":{"line":238,"column":4}}]},"57":{"line":238,"type":"binary-expr","locations":[{"start":{"line":238,"column":8},"end":{"line":238,"column":36}},{"start":{"line":238,"column":40},"end":{"line":238,"column":102}}]},"58":{"line":264,"type":"if","locations":[{"start":{"line":264,"column":2},"end":{"line":264,"column":2}},{"start":{"line":264,"column":2},"end":{"line":264,"column":2}}]},"59":{"line":264,"type":"binary-expr","locations":[{"start":{"line":264,"column":6},"end":{"line":264,"column":23}},{"start":{"line":264,"column":27},"end":{"line":264,"column":47}}]},"60":{"line":267,"type":"if","locations":[{"start":{"line":267,"column":2},"end":{"line":267,"column":2}},{"start":{"line":267,"column":2},"end":{"line":267,"column":2}}]},"61":{"line":298,"type":"if","locations":[{"start":{"line":298,"column":2},"end":{"line":298,"column":2}},{"start":{"line":298,"column":2},"end":{"line":298,"column":2}}]},"62":{"line":300,"type":"if","locations":[{"start":{"line":300,"column":4},"end":{"line":300,"column":4}},{"start":{"line":300,"column":4},"end":{"line":300,"column":4}}]},"63":{"line":301,"type":"if","locations":[{"start":{"line":301,"column":6},"end":{"line":301,"column":6}},{"start":{"line":301,"column":6},"end":{"line":301,"column":6}}]},"64":{"line":301,"type":"binary-expr","locations":[{"start":{"line":301,"column":10},"end":{"line":301,"column":31}},{"start":{"line":301,"column":35},"end":{"line":301,"column":65}}]},"65":{"line":308,"type":"if","locations":[{"start":{"line":308,"column":4},"end":{"line":308,"column":4}},{"start":{"line":308,"column":4},"end":{"line":308,"column":4}}]},"66":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":6},"end":{"line":309,"column":6}},{"start":{"line":309,"column":6},"end":{"line":309,"column":6}}]},"67":{"line":309,"type":"binary-expr","locations":[{"start":{"line":309,"column":10},"end":{"line":309,"column":34}},{"start":{"line":309,"column":38},"end":{"line":309,"column":71}}]},"68":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8}},{"start":{"line":310,"column":8},"end":{"line":310,"column":8}}]},"69":{"line":319,"type":"if","locations":[{"start":{"line":319,"column":4},"end":{"line":319,"column":4}},{"start":{"line":319,"column":4},"end":{"line":319,"column":4}}]},"70":{"line":320,"type":"if","locations":[{"start":{"line":320,"column":6},"end":{"line":320,"column":6}},{"start":{"line":320,"column":6},"end":{"line":320,"column":6}}]},"71":{"line":320,"type":"binary-expr","locations":[{"start":{"line":320,"column":10},"end":{"line":320,"column":35}},{"start":{"line":320,"column":39},"end":{"line":320,"column":80}}]},"72":{"line":327,"type":"if","locations":[{"start":{"line":327,"column":4},"end":{"line":327,"column":4}},{"start":{"line":327,"column":4},"end":{"line":327,"column":4}}]},"73":{"line":328,"type":"if","locations":[{"start":{"line":328,"column":6},"end":{"line":328,"column":6}},{"start":{"line":328,"column":6},"end":{"line":328,"column":6}}]},"74":{"line":328,"type":"binary-expr","locations":[{"start":{"line":328,"column":10},"end":{"line":328,"column":32}},{"start":{"line":328,"column":36},"end":{"line":328,"column":88}}]},"75":{"line":336,"type":"if","locations":[{"start":{"line":336,"column":2},"end":{"line":336,"column":2}},{"start":{"line":336,"column":2},"end":{"line":336,"column":2}}]},"76":{"line":338,"type":"if","locations":[{"start":{"line":338,"column":9},"end":{"line":338,"column":9}},{"start":{"line":338,"column":9},"end":{"line":338,"column":9}}]},"77":{"line":354,"type":"cond-expr","locations":[{"start":{"line":354,"column":77},"end":{"line":354,"column":84}},{"start":{"line":354,"column":87},"end":{"line":354,"column":96}}]},"78":{"line":354,"type":"binary-expr","locations":[{"start":{"line":354,"column":28},"end":{"line":354,"column":46}},{"start":{"line":354,"column":50},"end":{"line":354,"column":73}}]},"79":{"line":366,"type":"if","locations":[{"start":{"line":366,"column":2},"end":{"line":366,"column":2}},{"start":{"line":366,"column":2},"end":{"line":366,"column":2}}]},"80":{"line":378,"type":"if","locations":[{"start":{"line":378,"column":2},"end":{"line":378,"column":2}},{"start":{"line":378,"column":2},"end":{"line":378,"column":2}}]},"81":{"line":391,"type":"if","locations":[{"start":{"line":391,"column":2},"end":{"line":391,"column":2}},{"start":{"line":391,"column":2},"end":{"line":391,"column":2}}]},"82":{"line":393,"type":"if","locations":[{"start":{"line":393,"column":4},"end":{"line":393,"column":4}},{"start":{"line":393,"column":4},"end":{"line":393,"column":4}}]},"83":{"line":404,"type":"if","locations":[{"start":{"line":404,"column":9},"end":{"line":404,"column":9}},{"start":{"line":404,"column":9},"end":{"line":404,"column":9}}]},"84":{"line":406,"type":"if","locations":[{"start":{"line":406,"column":4},"end":{"line":406,"column":4}},{"start":{"line":406,"column":4},"end":{"line":406,"column":4}}]},"85":{"line":408,"type":"if","locations":[{"start":{"line":408,"column":6},"end":{"line":408,"column":6}},{"start":{"line":408,"column":6},"end":{"line":408,"column":6}}]},"86":{"line":411,"type":"if","locations":[{"start":{"line":411,"column":10},"end":{"line":411,"column":10}},{"start":{"line":411,"column":10},"end":{"line":411,"column":10}}]},"87":{"line":423,"type":"if","locations":[{"start":{"line":423,"column":12},"end":{"line":423,"column":12}},{"start":{"line":423,"column":12},"end":{"line":423,"column":12}}]},"88":{"line":436,"type":"if","locations":[{"start":{"line":436,"column":8},"end":{"line":436,"column":8}},{"start":{"line":436,"column":8},"end":{"line":436,"column":8}}]},"89":{"line":448,"type":"if","locations":[{"start":{"line":448,"column":4},"end":{"line":448,"column":4}},{"start":{"line":448,"column":4},"end":{"line":448,"column":4}}]},"90":{"line":454,"type":"if","locations":[{"start":{"line":454,"column":12},"end":{"line":454,"column":12}},{"start":{"line":454,"column":12},"end":{"line":454,"column":12}}]},"91":{"line":457,"type":"if","locations":[{"start":{"line":457,"column":14},"end":{"line":457,"column":14}},{"start":{"line":457,"column":14},"end":{"line":457,"column":14}}]},"92":{"line":470,"type":"if","locations":[{"start":{"line":470,"column":10},"end":{"line":470,"column":10}},{"start":{"line":470,"column":10},"end":{"line":470,"column":10}}]},"93":{"line":473,"type":"if","locations":[{"start":{"line":473,"column":12},"end":{"line":473,"column":12}},{"start":{"line":473,"column":12},"end":{"line":473,"column":12}}]},"94":{"line":519,"type":"cond-expr","locations":[{"start":{"line":519,"column":72},"end":{"line":519,"column":79},"skip":true},{"start":{"line":519,"column":82},"end":{"line":519,"column":89},"skip":true}]}},"code":["'use strict';","","const util = require('util');","const is = require('./is');","const sharp = require('../build/Release/sharp.node');","","/**"," * Write output image data to a file."," *"," * If an explicit output format is not selected, it will be inferred from the extension,"," * with JPEG, PNG, WebP, TIFF, DZI, and libvips' V format supported."," * Note that raw pixel data is only supported for buffer output."," *"," * A Promises/A+ promise is returned when `callback` is not provided."," *"," * @param {String} fileOut - the path to write the image data to."," * @param {Function} [callback] - called on completion with two arguments `(err, info)`."," * `info` contains the output image `format`, `size` (bytes), `width`, `height` and `channels`."," * @returns {Promise<Object>} - when no callback is provided"," * @throws {Error} Invalid parameters"," */","function toFile (fileOut, callback) {","  if (!fileOut || fileOut.length === 0) {","    const errOutputInvalid = new Error('Invalid output');","    if (is.fn(callback)) {","      callback(errOutputInvalid);","    } else {","      return Promise.reject(errOutputInvalid);","    }","  } else {","    if (this.options.input.file === fileOut) {","      const errOutputIsInput = new Error('Cannot use same file for input and output');","      if (is.fn(callback)) {","        callback(errOutputIsInput);","      } else {","        return Promise.reject(errOutputIsInput);","      }","    } else {","      this.options.fileOut = fileOut;","      return this._pipeline(callback);","    }","  }","  return this;","}","","/**"," * Write output to a Buffer."," * JPEG, PNG, WebP, and RAW output are supported."," * By default, the format will match the input image, except GIF and SVG input which become PNG output."," *"," * `callback`, if present, gets three arguments `(err, data, info)` where:"," * - `err` is an error, if any."," * - `data` is the output image data."," * - `info` contains the output image `format`, `size` (bytes), `width`, `height` and `channels`."," * A Promise is returned when `callback` is not provided."," *"," * @param {Object} [options]"," * @param {Boolean} [options.resolveWithObject] Resolve the Promise with an Object containing `data` and `info` properties instead of resolving only with `data`."," * @param {Function} [callback]"," * @returns {Promise<Buffer>} - when no callback is provided"," */","function toBuffer (options, callback) {","  if (is.object(options)) {","    if (is.bool(options.resolveWithObject)) {","      this.options.resolveWithObject = options.resolveWithObject;","    }","  }","  return this._pipeline(is.fn(options) ? options : callback);","}","","/**"," * Include all metadata (EXIF, XMP, IPTC) from the input image in the output image."," * The default behaviour, when `withMetadata` is not used, is to strip all metadata and convert to the device-independent sRGB colour space."," * This will also convert to and add a web-friendly sRGB ICC profile."," * @param {Object} [withMetadata]"," * @param {Number} [withMetadata.orientation] value between 1 and 8, used to update the EXIF `Orientation` tag."," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function withMetadata (withMetadata) {","  this.options.withMetadata = is.bool(withMetadata) ? withMetadata : true;","  if (is.object(withMetadata)) {","    if (is.defined(withMetadata.orientation)) {","      if (is.integer(withMetadata.orientation) && is.inRange(withMetadata.orientation, 1, 8)) {","        this.options.withMetadataOrientation = withMetadata.orientation;","      } else {","        throw new Error('Invalid orientation (1 to 8) ' + withMetadata.orientation);","      }","    }","  }","  return this;","}","","/**"," * Use these JPEG options for output image."," * @param {Object} [options] - output options"," * @param {Number} [options.quality=80] - quality, integer 1-100"," * @param {Boolean} [options.progressive=false] - use progressive (interlace) scan"," * @param {String} [options.chromaSubsampling='4:2:0'] - set to '4:4:4' to prevent chroma subsampling when quality <= 90"," * @param {Boolean} [options.trellisQuantisation=false] - apply trellis quantisation, requires mozjpeg"," * @param {Boolean} [options.overshootDeringing=false] - apply overshoot deringing, requires mozjpeg"," * @param {Boolean} [options.optimiseScans=false] - optimise progressive scans, forces progressive, requires mozjpeg"," * @param {Boolean} [options.optimizeScans=false] - alternative spelling of optimiseScans"," * @param {Boolean} [options.force=true] - force JPEG output, otherwise attempt to use input format"," * @returns {Sharp}"," * @throws {Error} Invalid options"," */","function jpeg (options) {","  if (is.object(options)) {","    if (is.defined(options.quality)) {","      if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {","        this.options.jpegQuality = options.quality;","      } else {","        throw new Error('Invalid quality (integer, 1-100) ' + options.quality);","      }","    }","    if (is.defined(options.progressive)) {","      this._setBooleanOption('jpegProgressive', options.progressive);","    }","    if (is.defined(options.chromaSubsampling)) {","      if (is.string(options.chromaSubsampling) && is.inArray(options.chromaSubsampling, ['4:2:0', '4:4:4'])) {","        this.options.jpegChromaSubsampling = options.chromaSubsampling;","      } else {","        throw new Error('Invalid chromaSubsampling (4:2:0, 4:4:4) ' + options.chromaSubsampling);","      }","    }","    options.trellisQuantisation = is.bool(options.trellisQuantization) ? options.trellisQuantization : options.trellisQuantisation;","    if (is.defined(options.trellisQuantisation)) {","      this._setBooleanOption('jpegTrellisQuantisation', options.trellisQuantisation);","    }","    if (is.defined(options.overshootDeringing)) {","      this._setBooleanOption('jpegOvershootDeringing', options.overshootDeringing);","    }","    options.optimiseScans = is.bool(options.optimizeScans) ? options.optimizeScans : options.optimiseScans;","    if (is.defined(options.optimiseScans)) {","      this._setBooleanOption('jpegOptimiseScans', options.optimiseScans);","      if (options.optimiseScans) {","        this.options.jpegProgressive = true;","      }","    }","  }","  return this._updateFormatOut('jpeg', options);","}","","/**"," * Use these PNG options for output image."," * @param {Object} [options]"," * @param {Boolean} [options.progressive=false] - use progressive (interlace) scan"," * @param {Number} [options.compressionLevel=6] - zlib compression level"," * @param {Boolean} [options.adaptiveFiltering=true] - use adaptive row filtering"," * @param {Boolean} [options.force=true] - force PNG output, otherwise attempt to use input format"," * @returns {Sharp}"," * @throws {Error} Invalid options"," */","function png (options) {","  if (is.object(options)) {","    if (is.defined(options.progressive)) {","      this._setBooleanOption('pngProgressive', options.progressive);","    }","    if (is.defined(options.compressionLevel)) {","      if (is.integer(options.compressionLevel) && is.inRange(options.compressionLevel, 0, 9)) {","        this.options.pngCompressionLevel = options.compressionLevel;","      } else {","        throw new Error('Invalid compressionLevel (integer, 0-9) ' + options.compressionLevel);","      }","    }","    if (is.defined(options.adaptiveFiltering)) {","      this._setBooleanOption('pngAdaptiveFiltering', options.adaptiveFiltering);","    }","  }","  return this._updateFormatOut('png', options);","}","","/**"," * Use these WebP options for output image."," * @param {Object} [options] - output options"," * @param {Number} [options.quality=80] - quality, integer 1-100"," * @param {Number} [options.alphaQuality=100] - quality of alpha layer, integer 0-100"," * @param {Boolean} [options.lossless=false] - use lossless compression mode"," * @param {Boolean} [options.nearLossless=false] - use near_lossless compression mode"," * @param {Boolean} [options.force=true] - force WebP output, otherwise attempt to use input format"," * @returns {Sharp}"," * @throws {Error} Invalid options"," */","function webp (options) {","  if (is.object(options) && is.defined(options.quality)) {","    if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {","      this.options.webpQuality = options.quality;","    } else {","      throw new Error('Invalid quality (integer, 1-100) ' + options.quality);","    }","  }","  if (is.object(options) && is.defined(options.alphaQuality)) {","    if (is.integer(options.alphaQuality) && is.inRange(options.alphaQuality, 1, 100)) {","      this.options.webpAlphaQuality = options.alphaQuality;","    } else {","      throw new Error('Invalid webp alpha quality (integer, 1-100) ' + options.alphaQuality);","    }","  }","  if (is.object(options) && is.defined(options.lossless)) {","    this._setBooleanOption('webpLossless', options.lossless);","  }","  if (is.object(options) && is.defined(options.nearLossless)) {","    this._setBooleanOption('webpNearLossless', options.nearLossless);","  }","  return this._updateFormatOut('webp', options);","}","","/**"," * Use these TIFF options for output image."," * @param {Object} [options] - output options"," * @param {Number} [options.quality=80] - quality, integer 1-100"," * @param {Boolean} [options.force=true] - force TIFF output, otherwise attempt to use input format"," * @param {Boolean} [options.compression='jpeg'] - compression options: lzw, deflate, jpeg"," * @param {Boolean} [options.predictor='none'] - compression predictor options: none, horizontal, float"," * @returns {Sharp}"," * @throws {Error} Invalid options"," */","function tiff (options) {","  if (is.object(options) && is.defined(options.quality)) {","    if (is.integer(options.quality) && is.inRange(options.quality, 1, 100)) {","      this.options.tiffQuality = options.quality;","    } else {","      throw new Error('Invalid quality (integer, 1-100) ' + options.quality);","    }","  }","  // compression","  if (is.defined(options) && is.defined(options.compression)) {","    if (is.string(options.compression) && is.inArray(options.compression, ['lzw', 'deflate', 'jpeg', 'none'])) {","      this.options.tiffCompression = options.compression;","    } else {","      const message = `Invalid compression option \"${options.compression}\". Should be one of: lzw, deflate, jpeg, none`;","      throw new Error(message);","    }","  }","  // predictor","  if (is.defined(options) && is.defined(options.predictor)) {","    if (is.string(options.predictor) && is.inArray(options.predictor, ['none', 'horizontal', 'float'])) {","      this.options.tiffPredictor = options.predictor;","    } else {","      const message = `Invalid predictor option \"${options.predictor}\". Should be one of: none, horizontal, float`;","      throw new Error(message);","    }","  }","  return this._updateFormatOut('tiff', options);","}","","/**"," * Force output to be raw, uncompressed uint8 pixel data."," * @returns {Sharp}"," */","function raw () {","  return this._updateFormatOut('raw');","}","","/**"," * Force output to a given format."," * @param {(String|Object)} format - as a String or an Object with an 'id' attribute"," * @param {Object} options - output options"," * @returns {Sharp}"," * @throws {Error} unsupported format or options"," */","function toFormat (format, options) {","  if (is.object(format) && is.string(format.id)) {","    format = format.id;","  }","  if (!is.inArray(format, ['jpeg', 'png', 'webp', 'tiff', 'raw'])) {","    throw new Error('Unsupported output format ' + format);","  }","  return this[format](options);","}","","/**"," * Use tile-based deep zoom (image pyramid) output."," * Set the format and options for tile images via the `toFormat`, `jpeg`, `png` or `webp` functions."," * Use a `.zip` or `.szi` file extension with `toFile` to write to a compressed archive file format."," *"," * @example"," *  sharp('input.tiff')"," *   .png()"," *   .tile({"," *     size: 512"," *   })"," *   .toFile('output.dz', function(err, info) {"," *     // output.dzi is the Deep Zoom XML definition"," *     // output_files contains 512x512 tiles grouped by zoom level"," *   });"," *"," * @param {Object} [tile]"," * @param {Number} [tile.size=256] tile size in pixels, a value between 1 and 8192."," * @param {Number} [tile.overlap=0] tile overlap in pixels, a value between 0 and 8192."," * @param {String} [tile.container='fs'] tile container, with value `fs` (filesystem) or `zip` (compressed file)."," * @param {String} [tile.layout='dz'] filesystem layout, possible values are `dz`, `zoomify` or `google`."," * @returns {Sharp}"," * @throws {Error} Invalid parameters"," */","function tile (tile) {","  if (is.object(tile)) {","    // Size of square tiles, in pixels","    if (is.defined(tile.size)) {","      if (is.integer(tile.size) && is.inRange(tile.size, 1, 8192)) {","        this.options.tileSize = tile.size;","      } else {","        throw new Error('Invalid tile size (1 to 8192) ' + tile.size);","      }","    }","    // Overlap of tiles, in pixels","    if (is.defined(tile.overlap)) {","      if (is.integer(tile.overlap) && is.inRange(tile.overlap, 0, 8192)) {","        if (tile.overlap > this.options.tileSize) {","          throw new Error('Tile overlap ' + tile.overlap + ' cannot be larger than tile size ' + this.options.tileSize);","        }","        this.options.tileOverlap = tile.overlap;","      } else {","        throw new Error('Invalid tile overlap (0 to 8192) ' + tile.overlap);","      }","    }","    // Container","    if (is.defined(tile.container)) {","      if (is.string(tile.container) && is.inArray(tile.container, ['fs', 'zip'])) {","        this.options.tileContainer = tile.container;","      } else {","        throw new Error('Invalid tile container ' + tile.container);","      }","    }","    // Layout","    if (is.defined(tile.layout)) {","      if (is.string(tile.layout) && is.inArray(tile.layout, ['dz', 'google', 'zoomify'])) {","        this.options.tileLayout = tile.layout;","      } else {","        throw new Error('Invalid tile layout ' + tile.layout);","      }","    }","  }","  // Format","  if (is.inArray(this.options.formatOut, ['jpeg', 'png', 'webp'])) {","    this.options.tileFormat = this.options.formatOut;","  } else if (this.options.formatOut !== 'input') {","    throw new Error('Invalid tile format ' + this.options.formatOut);","  }","  return this._updateFormatOut('dz');","}","","/**"," * Update the output format unless options.force is false,"," * in which case revert to input format."," * @private"," * @param {String} formatOut"," * @param {Object} [options]"," * @param {Boolean} [options.force=true] - force output format, otherwise attempt to use input format"," * @returns {Sharp}"," */","function _updateFormatOut (formatOut, options) {","  this.options.formatOut = (is.object(options) && options.force === false) ? 'input' : formatOut;","  return this;","}","","/**"," * Update a Boolean attribute of the this.options Object."," * @private"," * @param {String} key"," * @param {Boolean} val"," * @throws {Error} Invalid key"," */","function _setBooleanOption (key, val) {","  if (is.bool(val)) {","    this.options[key] = val;","  } else {","    throw new Error('Invalid ' + key + ' (boolean) ' + val);","  }","}","","/**"," * Called by a WriteableStream to notify us it is ready for data."," * @private"," */","function _read () {","  if (!this.options.streamOut) {","    this.options.streamOut = true;","    this._pipeline();","  }","}","","/**"," * Invoke the C++ image processing pipeline"," * Supports callback, stream and promise variants"," * @private"," */","function _pipeline (callback) {","  const that = this;","  if (typeof callback === 'function') {","    // output=file/buffer","    if (this._isStreamInput()) {","      // output=file/buffer, input=stream","      this.on('finish', function () {","        that._flattenBufferIn();","        sharp.pipeline(that.options, callback);","      });","    } else {","      // output=file/buffer, input=file/buffer","      sharp.pipeline(this.options, callback);","    }","    return this;","  } else if (this.options.streamOut) {","    // output=stream","    if (this._isStreamInput()) {","      // output=stream, input=stream","      if (this.streamInFinished) {","        this._flattenBufferIn();","        sharp.pipeline(this.options, function (err, data, info) {","          if (err) {","            that.emit('error', err);","          } else {","            that.emit('info', info);","            that.push(data);","          }","          that.push(null);","        });","      } else {","        this.on('finish', function () {","          that._flattenBufferIn();","          sharp.pipeline(that.options, function (err, data, info) {","            if (err) {","              that.emit('error', err);","            } else {","              that.emit('info', info);","              that.push(data);","            }","            that.push(null);","          });","        });","      }","    } else {","      // output=stream, input=file/buffer","      sharp.pipeline(this.options, function (err, data, info) {","        if (err) {","          that.emit('error', err);","        } else {","          that.emit('info', info);","          that.push(data);","        }","        that.push(null);","      });","    }","    return this;","  } else {","    // output=promise","    if (this._isStreamInput()) {","      // output=promise, input=stream","      return new Promise(function (resolve, reject) {","        that.on('finish', function () {","          that._flattenBufferIn();","          sharp.pipeline(that.options, function (err, data, info) {","            if (err) {","              reject(err);","            } else {","              if (that.options.resolveWithObject) {","                resolve({ data: data, info: info });","              } else {","                resolve(data);","              }","            }","          });","        });","      });","    } else {","      // output=promise, input=file/buffer","      return new Promise(function (resolve, reject) {","        sharp.pipeline(that.options, function (err, data, info) {","          if (err) {","            reject(err);","          } else {","            if (that.options.resolveWithObject) {","              resolve({ data: data, info: info });","            } else {","              resolve(data);","            }","          }","        });","      });","    }","  }","}","","// Deprecated output options","/* istanbul ignore next */","const quality = util.deprecate(function (quality) {","  const formatOut = this.options.formatOut;","  const options = { quality: quality };","  this.jpeg(options).webp(options).tiff(options);","  this.options.formatOut = formatOut;","  return this;","}, 'quality: use jpeg({ quality: ... }), webp({ quality: ... }) and/or tiff({ quality: ... }) instead');","/* istanbul ignore next */","const progressive = util.deprecate(function (progressive) {","  const formatOut = this.options.formatOut;","  const options = { progressive: (progressive !== false) };","  this.jpeg(options).png(options);","  this.options.formatOut = formatOut;","  return this;","}, 'progressive: use jpeg({ progressive: ... }) and/or png({ progressive: ... }) instead');","/* istanbul ignore next */","const compressionLevel = util.deprecate(function (compressionLevel) {","  const formatOut = this.options.formatOut;","  this.png({ compressionLevel: compressionLevel });","  this.options.formatOut = formatOut;","  return this;","}, 'compressionLevel: use png({ compressionLevel: ... }) instead');","/* istanbul ignore next */","const withoutAdaptiveFiltering = util.deprecate(function (withoutAdaptiveFiltering) {","  const formatOut = this.options.formatOut;","  this.png({ adaptiveFiltering: (withoutAdaptiveFiltering === false) });","  this.options.formatOut = formatOut;","  return this;","}, 'withoutAdaptiveFiltering: use png({ adaptiveFiltering: ... }) instead');","/* istanbul ignore next */","const withoutChromaSubsampling = util.deprecate(function (withoutChromaSubsampling) {","  const formatOut = this.options.formatOut;","  this.jpeg({ chromaSubsampling: (withoutChromaSubsampling === false) ? '4:2:0' : '4:4:4' });","  this.options.formatOut = formatOut;","  return this;","}, 'withoutChromaSubsampling: use jpeg({ chromaSubsampling: \"4:4:4\" }) instead');","/* istanbul ignore next */","const trellisQuantisation = util.deprecate(function (trellisQuantisation) {","  const formatOut = this.options.formatOut;","  this.jpeg({ trellisQuantisation: (trellisQuantisation !== false) });","  this.options.formatOut = formatOut;","  return this;","}, 'trellisQuantisation: use jpeg({ trellisQuantisation: ... }) instead');","/* istanbul ignore next */","const overshootDeringing = util.deprecate(function (overshootDeringing) {","  const formatOut = this.options.formatOut;","  this.jpeg({ overshootDeringing: (overshootDeringing !== false) });","  this.options.formatOut = formatOut;","  return this;","}, 'overshootDeringing: use jpeg({ overshootDeringing: ... }) instead');","/* istanbul ignore next */","const optimiseScans = util.deprecate(function (optimiseScans) {","  const formatOut = this.options.formatOut;","  this.jpeg({ optimiseScans: (optimiseScans !== false) });","  this.options.formatOut = formatOut;","  return this;","}, 'optimiseScans: use jpeg({ optimiseScans: ... }) instead');","","/**"," * Decorate the Sharp prototype with output-related functions."," * @private"," */","module.exports = function (Sharp) {","  [","    // Public","    toFile,","    toBuffer,","    withMetadata,","    jpeg,","    png,","    webp,","    tiff,","    raw,","    toFormat,","    tile,","    // Private","    _updateFormatOut,","    _setBooleanOption,","    _read,","    _pipeline","  ].forEach(function (f) {","    Sharp.prototype[f.name] = f;","  });","  // Deprecated","  Sharp.prototype.quality = quality;","  Sharp.prototype.progressive = progressive;","  Sharp.prototype.compressionLevel = compressionLevel;","  Sharp.prototype.withoutAdaptiveFiltering = withoutAdaptiveFiltering;","  Sharp.prototype.withoutChromaSubsampling = withoutChromaSubsampling;","  Sharp.prototype.trellisQuantisation = trellisQuantisation;","  Sharp.prototype.trellisQuantization = trellisQuantisation;","  Sharp.prototype.overshootDeringing = overshootDeringing;","  Sharp.prototype.optimiseScans = optimiseScans;","  Sharp.prototype.optimizeScans = optimiseScans;","};",""],"l":{"3":1,"4":1,"5":1,"22":1,"23":0,"24":0,"25":0,"26":0,"28":0,"31":0,"32":0,"33":0,"34":0,"36":0,"39":0,"40":0,"43":0,"62":1,"63":0,"64":0,"65":0,"68":0,"80":1,"81":0,"82":0,"83":0,"84":0,"85":0,"87":0,"91":0,"108":1,"109":0,"110":0,"111":0,"112":0,"114":0,"117":0,"118":0,"120":0,"121":0,"122":0,"124":0,"127":0,"128":0,"129":0,"131":0,"132":0,"134":0,"135":0,"136":0,"137":0,"138":0,"142":0,"155":1,"156":0,"157":0,"158":0,"160":0,"161":0,"162":0,"164":0,"167":0,"168":0,"171":0,"185":1,"186":0,"187":0,"188":0,"190":0,"193":0,"194":0,"195":0,"197":0,"200":0,"201":0,"203":0,"204":0,"206":0,"219":1,"220":0,"221":0,"222":0,"224":0,"228":0,"229":0,"230":0,"232":0,"233":0,"237":0,"238":0,"239":0,"241":0,"242":0,"245":0,"252":1,"253":0,"263":1,"264":0,"265":0,"267":0,"268":0,"270":0,"297":1,"298":0,"300":0,"301":0,"302":0,"304":0,"308":0,"309":0,"310":0,"311":0,"313":0,"315":0,"319":0,"320":0,"321":0,"323":0,"327":0,"328":0,"329":0,"331":0,"336":0,"337":0,"338":0,"339":0,"341":0,"353":1,"354":0,"355":0,"365":1,"366":0,"367":0,"369":0,"377":1,"378":0,"379":0,"380":0,"389":1,"390":0,"391":0,"393":0,"395":0,"396":0,"397":0,"401":0,"403":0,"404":0,"406":0,"408":0,"409":0,"410":0,"411":0,"412":0,"414":0,"415":0,"417":0,"420":0,"421":0,"422":0,"423":0,"424":0,"426":0,"427":0,"429":0,"435":0,"436":0,"437":0,"439":0,"440":0,"442":0,"445":0,"448":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"457":0,"458":0,"460":0,"468":0,"469":0,"470":0,"471":0,"473":0,"474":0,"476":0,"487":1,"488":1,"489":1,"490":1,"491":1,"492":1,"495":1,"496":1,"497":1,"498":1,"499":1,"500":1,"503":1,"504":1,"505":1,"506":1,"507":1,"510":1,"511":1,"512":1,"513":1,"514":1,"517":1,"518":1,"519":1,"520":1,"521":1,"524":1,"525":1,"526":1,"527":1,"528":1,"531":1,"532":1,"533":1,"534":1,"535":1,"538":1,"539":1,"540":1,"541":1,"542":1,"549":1,"550":1,"568":14,"571":1,"572":1,"573":1,"574":1,"575":1,"576":1,"577":1,"578":1,"579":1,"580":1}},"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/utility.js":{"path":"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/lib/utility.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":1,"12":1,"13":0,"14":1,"15":0,"16":1,"17":1,"18":1,"19":1,"20":1,"21":4},"b":{"1":[1,0],"2":[1,0],"3":[0,0],"4":[0,0],"5":[1,0]},"f":{"1":1,"2":0,"3":0,"4":1,"5":1,"6":4},"fnMap":{"1":{"name":"cache","line":25,"loc":{"start":{"line":25,"column":0},"end":{"line":25,"column":25}}},"2":{"name":"concurrency","line":60,"loc":{"start":{"line":60,"column":0},"end":{"line":60,"column":35}}},"3":{"name":"counters","line":74,"loc":{"start":{"line":74,"column":0},"end":{"line":74,"column":21}}},"4":{"name":"simd","line":98,"loc":{"start":{"line":98,"column":0},"end":{"line":98,"column":21}}},"5":{"name":"(anonymous_5)","line":107,"loc":{"start":{"line":107,"column":17},"end":{"line":107,"column":34}}},"6":{"name":"(anonymous_6)","line":113,"loc":{"start":{"line":113,"column":12},"end":{"line":113,"column":25}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":53}},"3":{"start":{"line":25,"column":0},"end":{"line":38,"column":1}},"4":{"start":{"line":26,"column":2},"end":{"line":37,"column":3}},"5":{"start":{"line":27,"column":4},"end":{"line":32,"column":5}},"6":{"start":{"line":29,"column":6},"end":{"line":29,"column":38}},"7":{"start":{"line":31,"column":6},"end":{"line":31,"column":34}},"8":{"start":{"line":33,"column":9},"end":{"line":37,"column":3}},"9":{"start":{"line":34,"column":4},"end":{"line":34,"column":69}},"10":{"start":{"line":36,"column":4},"end":{"line":36,"column":25}},"11":{"start":{"line":39,"column":0},"end":{"line":39,"column":12}},"12":{"start":{"line":60,"column":0},"end":{"line":62,"column":1}},"13":{"start":{"line":61,"column":2},"end":{"line":61,"column":73}},"14":{"start":{"line":74,"column":0},"end":{"line":76,"column":1}},"15":{"start":{"line":75,"column":2},"end":{"line":75,"column":26}},"16":{"start":{"line":98,"column":0},"end":{"line":100,"column":1}},"17":{"start":{"line":99,"column":2},"end":{"line":99,"column":49}},"18":{"start":{"line":101,"column":0},"end":{"line":101,"column":12}},"19":{"start":{"line":107,"column":0},"end":{"line":116,"column":2}},"20":{"start":{"line":108,"column":2},"end":{"line":115,"column":5}},"21":{"start":{"line":114,"column":4},"end":{"line":114,"column":22}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":2},"end":{"line":26,"column":2}},{"start":{"line":26,"column":2},"end":{"line":26,"column":2}}]},"2":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":4}},{"start":{"line":27,"column":4},"end":{"line":27,"column":4}}]},"3":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":9},"end":{"line":33,"column":9}},{"start":{"line":33,"column":9},"end":{"line":33,"column":9}}]},"4":{"line":61,"type":"cond-expr","locations":[{"start":{"line":61,"column":53},"end":{"line":61,"column":64}},{"start":{"line":61,"column":67},"end":{"line":61,"column":71}}]},"5":{"line":99,"type":"cond-expr","locations":[{"start":{"line":99,"column":36},"end":{"line":99,"column":40}},{"start":{"line":99,"column":43},"end":{"line":99,"column":47}}]}},"code":["'use strict';","","const is = require('./is');","const sharp = require('../build/Release/sharp.node');","","/**"," * Gets, or when options are provided sets, the limits of _libvips'_ operation cache."," * Existing entries in the cache will be trimmed after any change in limits."," * This method always returns cache statistics,"," * useful for determining how much working memory is required for a particular task."," *"," * @example"," * const stats = sharp.cache();"," * @example"," * sharp.cache( { items: 200 } );"," * sharp.cache( { files: 0 } );"," * sharp.cache(false);"," *"," * @param {Object|Boolean} options - Object with the following attributes, or Boolean where true uses default cache settings and false removes all caching."," * @param {Number} [options.memory=50] - is the maximum memory in MB to use for this cache"," * @param {Number} [options.files=20] - is the maximum number of files to hold open"," * @param {Number} [options.items=100] - is the maximum number of operations to cache"," * @returns {Object}"," */","function cache (options) {","  if (is.bool(options)) {","    if (options) {","      // Default cache settings of 50MB, 20 files, 100 items","      return sharp.cache(50, 20, 100);","    } else {","      return sharp.cache(0, 0, 0);","    }","  } else if (is.object(options)) {","    return sharp.cache(options.memory, options.files, options.items);","  } else {","    return sharp.cache();","  }","}","cache(true);","","/**"," * Gets, or when a concurrency is provided sets,"," * the number of threads _libvips'_ should create to process each image."," * The default value is the number of CPU cores."," * A value of `0` will reset to this default."," *"," * The maximum number of images that can be processed in parallel"," * is limited by libuv's `UV_THREADPOOL_SIZE` environment variable."," *"," * This method always returns the current concurrency."," *"," * @example"," * const threads = sharp.concurrency(); // 4"," * sharp.concurrency(2); // 2"," * sharp.concurrency(0); // 4"," *"," * @param {Number} [concurrency]"," * @returns {Number} concurrency"," */","function concurrency (concurrency) {","  return sharp.concurrency(is.integer(concurrency) ? concurrency : null);","}","","/**"," * Provides access to internal task counters."," * - queue is the number of tasks this module has queued waiting for _libuv_ to provide a worker thread from its pool."," * - process is the number of resize tasks currently being processed."," *"," * @example"," * const counters = sharp.counters(); // { queue: 2, process: 4 }"," *"," * @returns {Object}"," */","function counters () {","  return sharp.counters();","}","","/**"," * Get and set use of SIMD vector unit instructions."," * Requires libvips to have been compiled with liborc support."," *"," * Improves the performance of `resize`, `blur` and `sharpen` operations"," * by taking advantage of the SIMD vector unit of the CPU, e.g. Intel SSE and ARM NEON."," *"," * This feature is currently off by default but future versions may reverse this."," * Versions of liborc prior to 0.4.25 are known to segfault under heavy load."," *"," * @example"," * const simd = sharp.simd();"," * // simd is `true` if SIMD is currently enabled"," * @example"," * const simd = sharp.simd(true);"," * // attempts to enable the use of SIMD, returning true if available"," *"," * @param {Boolean} [simd=false]"," * @returns {Boolean}"," */","function simd (simd) {","  return sharp.simd(is.bool(simd) ? simd : null);","}","simd(false);","","/**"," * Decorate the Sharp class with utility-related functions."," * @private"," */","module.exports = function (Sharp) {","  [","    cache,","    concurrency,","    counters,","    simd","  ].forEach(function (f) {","    Sharp[f.name] = f;","  });","};",""],"l":{"3":1,"4":1,"25":1,"26":1,"27":1,"29":1,"31":0,"33":0,"34":0,"36":0,"39":1,"60":1,"61":0,"74":1,"75":0,"98":1,"99":1,"101":1,"107":1,"108":1,"114":4}},"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/binding.js":{"path":"/home/travis/build/npmtest/node-npmtest-sharp/node_modules/sharp/binding.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":1,"62":0,"63":0,"64":0,"65":0,"66":0},"b":{"1":[1,1],"2":[1,1],"3":[1,1],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"(anonymous_1)","line":25,"loc":{"start":{"line":25,"column":15},"end":{"line":25,"column":31}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":15},"end":{"line":31,"column":40}}},"3":{"name":"(anonymous_3)","line":43,"loc":{"start":{"line":43,"column":19},"end":{"line":43,"column":31}}},"4":{"name":"(anonymous_4)","line":55,"loc":{"start":{"line":55,"column":14},"end":{"line":55,"column":29}}},"5":{"name":"(anonymous_5)","line":65,"loc":{"start":{"line":65,"column":31},"end":{"line":65,"column":43}}},"6":{"name":"(anonymous_6)","line":93,"loc":{"start":{"line":93,"column":69},"end":{"line":93,"column":81}}},"7":{"name":"(anonymous_7)","line":94,"loc":{"start":{"line":94,"column":28},"end":{"line":94,"column":40}}},"8":{"name":"(anonymous_8)","line":107,"loc":{"start":{"line":107,"column":45},"end":{"line":107,"column":65}}},"9":{"name":"(anonymous_9)","line":111,"loc":{"start":{"line":111,"column":21},"end":{"line":111,"column":36}}},"10":{"name":"(anonymous_10)","line":118,"loc":{"start":{"line":118,"column":33},"end":{"line":118,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":25}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":25}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":29}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":29}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":27}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":27}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":33}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":27}},"9":{"start":{"line":13,"column":0},"end":{"line":13,"column":59}},"10":{"start":{"line":16,"column":0},"end":{"line":16,"column":113}},"11":{"start":{"line":18,"column":0},"end":{"line":18,"column":69}},"12":{"start":{"line":20,"column":0},"end":{"line":20,"column":57}},"13":{"start":{"line":25,"column":0},"end":{"line":29,"column":2}},"14":{"start":{"line":26,"column":2},"end":{"line":28,"column":18}},"15":{"start":{"line":27,"column":4},"end":{"line":27,"column":38}},"16":{"start":{"line":31,"column":0},"end":{"line":41,"column":2}},"17":{"start":{"line":32,"column":2},"end":{"line":32,"column":74}},"18":{"start":{"line":33,"column":2},"end":{"line":35,"column":3}},"19":{"start":{"line":34,"column":4},"end":{"line":34,"column":30}},"20":{"start":{"line":36,"column":2},"end":{"line":36,"column":31}},"21":{"start":{"line":37,"column":2},"end":{"line":40,"column":21}},"22":{"start":{"line":43,"column":0},"end":{"line":52,"column":2}},"23":{"start":{"line":44,"column":2},"end":{"line":44,"column":32}},"24":{"start":{"line":45,"column":2},"end":{"line":50,"column":3}},"25":{"start":{"line":46,"column":4},"end":{"line":46,"column":126}},"26":{"start":{"line":47,"column":4},"end":{"line":47,"column":41}},"27":{"start":{"line":49,"column":4},"end":{"line":49,"column":26}},"28":{"start":{"line":51,"column":2},"end":{"line":51,"column":30}},"29":{"start":{"line":55,"column":0},"end":{"line":61,"column":2}},"30":{"start":{"line":56,"column":2},"end":{"line":58,"column":3}},"31":{"start":{"line":57,"column":4},"end":{"line":57,"column":22}},"32":{"start":{"line":59,"column":2},"end":{"line":59,"column":47}},"33":{"start":{"line":60,"column":2},"end":{"line":60,"column":18}},"34":{"start":{"line":65,"column":0},"end":{"line":116,"column":2}},"35":{"start":{"line":67,"column":2},"end":{"line":67,"column":85}},"36":{"start":{"line":68,"column":2},"end":{"line":115,"column":3}},"37":{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},"38":{"start":{"line":71,"column":6},"end":{"line":71,"column":132}},"39":{"start":{"line":74,"column":4},"end":{"line":74,"column":47}},"40":{"start":{"line":75,"column":4},"end":{"line":84,"column":5}},"41":{"start":{"line":76,"column":6},"end":{"line":83,"column":7}},"42":{"start":{"line":77,"column":8},"end":{"line":77,"column":104}},"43":{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},"44":{"start":{"line":79,"column":10},"end":{"line":79,"column":138}},"45":{"start":{"line":82,"column":8},"end":{"line":82,"column":130}},"46":{"start":{"line":86,"column":4},"end":{"line":86,"column":95}},"47":{"start":{"line":87,"column":4},"end":{"line":87,"column":72}},"48":{"start":{"line":88,"column":4},"end":{"line":114,"column":5}},"49":{"start":{"line":89,"column":6},"end":{"line":89,"column":27}},"50":{"start":{"line":92,"column":6},"end":{"line":92,"column":82}},"51":{"start":{"line":93,"column":6},"end":{"line":100,"column":9}},"52":{"start":{"line":94,"column":8},"end":{"line":99,"column":11}},"53":{"start":{"line":96,"column":10},"end":{"line":98,"column":26}},"54":{"start":{"line":97,"column":12},"end":{"line":97,"column":39}},"55":{"start":{"line":101,"column":6},"end":{"line":105,"column":8}},"56":{"start":{"line":106,"column":6},"end":{"line":106,"column":44}},"57":{"start":{"line":107,"column":6},"end":{"line":113,"column":23}},"58":{"start":{"line":108,"column":8},"end":{"line":110,"column":9}},"59":{"start":{"line":109,"column":10},"end":{"line":109,"column":61}},"60":{"start":{"line":112,"column":8},"end":{"line":112,"column":64}},"61":{"start":{"line":118,"column":0},"end":{"line":129,"column":2}},"62":{"start":{"line":119,"column":2},"end":{"line":119,"column":60}},"63":{"start":{"line":120,"column":2},"end":{"line":128,"column":3}},"64":{"start":{"line":121,"column":4},"end":{"line":124,"column":6}},"65":{"start":{"line":125,"column":4},"end":{"line":125,"column":59}},"66":{"start":{"line":127,"column":4},"end":{"line":127,"column":34}}},"branchMap":{"1":{"line":16,"type":"binary-expr","locations":[{"start":{"line":16,"column":30},"end":{"line":16,"column":68}},{"start":{"line":16,"column":72},"end":{"line":16,"column":112}}]},"2":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":17},"end":{"line":18,"column":48}},{"start":{"line":18,"column":52},"end":{"line":18,"column":68}}]},"3":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":13},"end":{"line":20,"column":40}},{"start":{"line":20,"column":44},"end":{"line":20,"column":56}}]},"4":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":2},"end":{"line":33,"column":2}},{"start":{"line":33,"column":2},"end":{"line":33,"column":2}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":2},"end":{"line":45,"column":2}},{"start":{"line":45,"column":2},"end":{"line":45,"column":2}}]},"6":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":6},"end":{"line":45,"column":20}},{"start":{"line":45,"column":24},"end":{"line":45,"column":40}},{"start":{"line":45,"column":44},"end":{"line":45,"column":61}}]},"7":{"line":46,"type":"cond-expr","locations":[{"start":{"line":46,"column":45},"end":{"line":46,"column":48}},{"start":{"line":46,"column":51},"end":{"line":46,"column":125}}]},"8":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":51},"end":{"line":46,"column":78}},{"start":{"line":46,"column":82},"end":{"line":46,"column":118}},{"start":{"line":46,"column":122},"end":{"line":46,"column":125}}]},"9":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":2},"end":{"line":56,"column":2}},{"start":{"line":56,"column":2},"end":{"line":56,"column":2}}]},"10":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":2},"end":{"line":68,"column":2}},{"start":{"line":68,"column":2},"end":{"line":68,"column":2}}]},"11":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":70,"column":4}},{"start":{"line":70,"column":4},"end":{"line":70,"column":4}}]},"12":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":4},"end":{"line":75,"column":4}},{"start":{"line":75,"column":4},"end":{"line":75,"column":4}}]},"13":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":6},"end":{"line":76,"column":6}},{"start":{"line":76,"column":6},"end":{"line":76,"column":6}}]},"14":{"line":77,"type":"cond-expr","locations":[{"start":{"line":77,"column":42},"end":{"line":77,"column":98}},{"start":{"line":77,"column":101},"end":{"line":77,"column":103}}]},"15":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":78,"column":8}},{"start":{"line":78,"column":8},"end":{"line":78,"column":8}}]},"16":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":12},"end":{"line":78,"column":24}},{"start":{"line":78,"column":28},"end":{"line":78,"column":68}}]},"17":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":4},"end":{"line":88,"column":4}},{"start":{"line":88,"column":4},"end":{"line":88,"column":4}}]},"18":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":8},"end":{"line":108,"column":8}},{"start":{"line":108,"column":8},"end":{"line":108,"column":8}}]},"19":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":2},"end":{"line":120,"column":2}},{"start":{"line":120,"column":2},"end":{"line":120,"column":2}}]},"20":{"line":125,"type":"cond-expr","locations":[{"start":{"line":125,"column":41},"end":{"line":125,"column":47}},{"start":{"line":125,"column":50},"end":{"line":125,"column":57}}]}},"code":["'use strict';","","const fs = require('fs');","const os = require('os');","const path = require('path');","const zlib = require('zlib');","","const caw = require('caw');","const got = require('got');","const semver = require('semver');","const tar = require('tar');","","const distBaseUrl = 'https://dl.bintray.com/lovell/sharp/';","","// Use NPM-provided environment variable where available, falling back to require-based method for Electron","const minimumLibvipsVersion = process.env.npm_package_config_libvips || require('./package.json').config.libvips;","","const platform = process.env.npm_config_platform || process.platform;","","const arch = process.env.npm_config_arch || process.arch;","","// -- Helpers","","// Does this file exist?","const isFile = function (file) {","  try {","    return fs.statSync(file).isFile();","  } catch (err) {}","};","","const unpack = function (tarPath, done) {","  const extractor = tar.Extract({ path: path.join(__dirname, 'vendor') });","  if (done) {","    extractor.on('end', done);","  }","  extractor.on('error', error);","  fs.createReadStream(tarPath)","    .on('error', error)","    .pipe(zlib.Unzip())","    .pipe(extractor);","};","","const platformId = function () {","  const platformId = [platform];","  if (arch === 'arm' || arch === 'armhf' || arch === 'arch64') {","    const armVersion = (arch === 'arch64') ? '8' : process.env.npm_config_armv || process.config.variables.arm_version || '6';","    platformId.push('armv' + armVersion);","  } else {","    platformId.push(arch);","  }","  return platformId.join('-');","};","","// Error","const error = function (msg) {","  if (msg instanceof Error) {","    msg = msg.message;","  }","  process.stderr.write('ERROR: ' + msg + '\\n');","  process.exit(1);","};","","// -- Binary downloaders","","module.exports.download_vips = function () {","  // Has vips been installed locally?","  const vipsHeaderPath = path.join(__dirname, 'vendor', 'include', 'vips', 'vips.h');","  if (!isFile(vipsHeaderPath)) {","    // Ensure Intel 64-bit or ARM","    if (arch === 'ia32') {","      error('Intel Architecture 32-bit systems require manual installation - please see http://sharp.dimens.io/en/stable/install/');","    }","    // Ensure glibc >= 2.15","    const lddVersion = process.env.LDD_VERSION;","    if (lddVersion) {","      if (/(glibc|gnu libc)/i.test(lddVersion)) {","        const glibcVersion = lddVersion ? lddVersion.split(/\\n/)[0].split(' ').slice(-1)[0].trim() : '';","        if (glibcVersion && semver.lt(glibcVersion + '.0', '2.13.0')) {","          error('glibc version ' + glibcVersion + ' requires manual installation - please see http://sharp.dimens.io/en/stable/install/');","        }","      } else {","        error(lddVersion.split(/\\n/)[0] + ' requires manual installation - please see http://sharp.dimens.io/en/stable/install/');","      }","    }","    // Arch/platform-specific .tar.gz","    const tarFilename = ['libvips', minimumLibvipsVersion, platformId()].join('-') + '.tar.gz';","    const tarPathLocal = path.join(__dirname, 'packaging', tarFilename);","    if (isFile(tarPathLocal)) {","      unpack(tarPathLocal);","    } else {","      // Download to per-process temporary file","      const tarPathTemp = path.join(os.tmpdir(), process.pid + '-' + tarFilename);","      const tmpFile = fs.createWriteStream(tarPathTemp).on('finish', function () {","        unpack(tarPathTemp, function () {","          // Attempt to remove temporary file","          try {","            fs.unlinkSync(tarPathTemp);","          } catch (err) {}","        });","      });","      const gotOpt = {","        agent: caw(null, {","          protocol: 'https'","        })","      };","      const url = distBaseUrl + tarFilename;","      got.stream(url, gotOpt).on('response', function (response) {","        if (response.statusCode !== 200) {","          error(url + ' status code ' + response.statusCode);","        }","      }).on('error', function (err) {","        error('Download of ' + url + ' failed: ' + err.message);","      }).pipe(tmpFile);","    }","  }","};","","module.exports.use_global_vips = function () {","  const globalVipsVersion = process.env.GLOBAL_VIPS_VERSION;","  if (globalVipsVersion) {","    const useGlobalVips = semver.gte(","      globalVipsVersion,","      minimumLibvipsVersion","    );","    process.stdout.write(useGlobalVips ? 'true' : 'false');","  } else {","    process.stdout.write('false');","  }","};",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"9":1,"10":1,"11":1,"13":1,"16":1,"18":1,"20":1,"25":1,"26":0,"27":0,"31":1,"32":0,"33":0,"34":0,"36":0,"37":0,"43":1,"44":0,"45":0,"46":0,"47":0,"49":0,"51":0,"55":1,"56":0,"57":0,"59":0,"60":0,"65":1,"67":0,"68":0,"70":0,"71":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"82":0,"86":0,"87":0,"88":0,"89":0,"92":0,"93":0,"94":0,"96":0,"97":0,"101":0,"106":0,"107":0,"108":0,"109":0,"112":0,"118":1,"119":0,"120":0,"121":0,"125":0,"127":0}}}